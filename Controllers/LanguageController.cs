using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication15.Models;
using WebApplication15.Services;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using WebApplication15.Data;

namespace WebApplication15.Controllers
{
    public class LanguageController : Controller
    {
        private readonly LanguageService _languageService;
        private readonly ThemeService _themeService;
        private readonly AuthService _authService;
        private readonly ApplicationDbContext _context;
        private readonly UserManager<ApplicationUser> _userManager;

        public LanguageController(LanguageService languageService,
                                ThemeService themeService,
                                AuthService authService,
                                ApplicationDbContext context,
                                UserManager<ApplicationUser> userManager)
        {
            _languageService = languageService;
            _themeService = themeService;
            _authService = authService;
            _context = context;
            _userManager = userManager;
        }

        public IActionResult Levels(int id)
        {
            ViewBag.IsDarkMode = _themeService.GetCurrentTheme();
            ViewBag.CurrentLanguage = _languageService.GetCurrentLanguage();
            ViewBag.IsAuthenticated = _authService.IsAuthenticated();
            
            var language = _context.Languages.Find(id);
            if (language == null)
            {
                return NotFound();
            }
            
            ViewBag.Language = language;
            
            var levels = _context.LanguageLevels
                .Where(l => l.LanguageId == id)
                .OrderBy(l => l.Level)
                .ToList();
                
            return View(levels);
        }

        [Authorize]
        public async Task<IActionResult> Tests(int id)
        {
            ViewBag.IsDarkMode = _themeService.GetCurrentTheme();
            ViewBag.CurrentLanguage = _languageService.GetCurrentLanguage();
            ViewBag.IsAuthenticated = true;
            
            var currentUser = await _userManager.GetUserAsync(User);
            if (currentUser == null)
            {
                return RedirectToAction("Login", "Account");
            }
            
            ViewBag.CurrentUser = currentUser;
            
            var level = await _context.LanguageLevels
                .Include(l => l.Language)
                .Include(l => l.Tests)
                .FirstOrDefaultAsync(l => l.Id == id);
                
            if (level == null)
            {
                return NotFound();
            }
            
            ViewBag.Level = level;
            
            string userId = currentUser.Id;
            if (string.IsNullOrEmpty(userId))
            {
                return RedirectToAction("Login", "Account"); // –ï—Å–ª–∏ ID –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
            }
            
            foreach (var test in level.Tests)
            {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                var testResult = await _context.TestResults
                    .AnyAsync(tr => tr.TestId == test.Id && tr.UserId == userId);
                ViewData[$"TestCompleted_{test.Id}"] = testResult;
            }

            return View(level);
        }

        [Authorize]
        public async Task<IActionResult> Videos(int id)
        {
            ViewBag.IsDarkMode = _themeService.GetCurrentTheme();
            ViewBag.CurrentLanguage = _languageService.GetCurrentLanguage();
            ViewBag.IsAuthenticated = true;
            
            var currentUser = await _userManager.GetUserAsync(User);
            if (currentUser == null)
            {
                return RedirectToAction("Login", "Account");
            }
            
            ViewBag.CurrentUser = currentUser;
            
            var level = await _context.LanguageLevels
                .Include(l => l.Language)
                .Include(l => l.Videos)
                .FirstOrDefaultAsync(l => l.Id == id);
                
            if (level == null)
            {
                return NotFound();
            }
            
            ViewBag.Level = level;
            return View(level);
        }

        public async Task<IActionResult> Kazakh()
        {
            ViewBag.IsDarkMode = _themeService.GetCurrentTheme();
            ViewBag.CurrentLanguage = _languageService.GetCurrentLanguage();
            ViewBag.IsAuthenticated = _authService.IsAuthenticated();
            
            // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ –µ–≥–æ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
            var language = await _context.Languages.FirstOrDefaultAsync(l => l.Code == "kk");
            var levels = new List<LanguageLevel>();
            
            if (language != null)
            {
                levels = await _context.LanguageLevels
                    .Where(l => l.LanguageId == language.Id)
                    .OrderBy(l => l.Level)
                    .ToListAsync();
                
                ViewBag.Language = language;
                ViewBag.Levels = levels;
            }
            
            var viewModel = new LanguageInfoViewModel
            {
                Name = "–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫",
                NativeName = "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ",
                SpeakersCount = "20+ –º–∏–ª–ª–∏–æ–Ω–æ–≤",
                Region = "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è",
                FlagEmoji = "üá∞üáø",
                BannerImage = "/images/kazakh_banner.jpg",
                Description = "–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ - —Ç—é—Ä–∫—Å–∫–∏–π —è–∑—ã–∫, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–∫ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ç–∞–∫ –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç. –ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –Ω–∞—Ä–æ–¥–∞ –∏ –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏. –í –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∏–∑—É—á–µ–Ω–∏—é –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∫–∞–∫ —Å—Ä–µ–¥–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è, —Ç–∞–∫ –∏ —Å—Ä–µ–¥–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è –∫—É–ª—å—Ç—É—Ä–æ–π –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.",
                Facts = new List<LanguageFact>
                {
                    new LanguageFact { Number = "01", Title = "–ì–∞—Ä–º–æ–Ω–∏—è –≥–ª–∞—Å–Ω—ã—Ö", Text = "–í –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É—é—Ç –ø—Ä–∞–≤–∏–ª—É –≥–∞—Ä–º–æ–Ω–∏–∏ –≥–ª–∞—Å–Ω—ã—Ö, –∫–æ–≥–¥–∞ –≥–ª–∞—Å–Ω—ã–µ –≤ —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏–±–æ –≤—Å–µ '–º—è–≥–∫–∏–º–∏', –ª–∏–±–æ –≤—Å–µ '—Ç–≤–µ—Ä–¥—ã–º–∏'." },
                    new LanguageFact { Number = "02", Title = "–ú–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –¥–∏–∞–ª–µ–∫—Ç–æ–≤", Text = "–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ –∏–º–µ–µ—Ç —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏–∞–ª–µ–∫—Ç–∞: –∑–∞–ø–∞–¥–Ω—ã–π, —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π –∏ —é–∂–Ω—ã–π, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –∏ —Å–ª–æ–≤–∞—Ä–Ω—ã–º –∑–∞–ø–∞—Å–æ–º." },
                    new LanguageFact { Number = "03", Title = "–ë–æ–≥–∞—Ç—ã–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", Text = "–Ø–∑—ã–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ—á–µ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏, –∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π, –æ—Ç—Ä–∞–∂–∞—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —É–∫–ª–∞–¥ –∂–∏–∑–Ω–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –Ω–∞—Ä–æ–¥–∞." },
                    new LanguageFact { Number = "04", Title = "–ü–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å", Text = "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç, –Ω–æ –≤–µ–¥—ë—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∞—Ä–∞–±—Å–∫–æ–µ –ø–∏—Å—å–º–æ." }
                }
            };
            
            return View("LanguageInfo", viewModel);
        }

        public async Task<IActionResult> English()
        {
            ViewBag.IsDarkMode = _themeService.GetCurrentTheme();
            ViewBag.CurrentLanguage = _languageService.GetCurrentLanguage();
            ViewBag.IsAuthenticated = _authService.IsAuthenticated();
            
            // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ –µ–≥–æ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
            var language = await _context.Languages.FirstOrDefaultAsync(l => l.Code == "en");
            var levels = new List<LanguageLevel>();
            
            if (language != null)
            {
                levels = await _context.LanguageLevels
                    .Where(l => l.LanguageId == language.Id)
                    .OrderBy(l => l.Level)
                    .ToListAsync();
                
                ViewBag.Language = language;
                ViewBag.Levels = levels;
            }
            
            var viewModel = new LanguageInfoViewModel
            {
                Name = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
                NativeName = "English",
                SpeakersCount = "1.5+ –º–∏–ª–ª–∏–∞—Ä–¥–∞",
                Region = "–ì–ª–æ–±–∞–ª—å–Ω—ã–π",
                FlagEmoji = "üá¨üáß",
                BannerImage = "/images/english_banner.jpg",
                Description = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π - –≥–µ—Ä–º–∞–Ω—Å–∫–∏–π —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–ª –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —è–∑—ã–∫–æ–º –±–∏–∑–Ω–µ—Å–∞, –Ω–∞—É–∫–∏ –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏. –û–Ω —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º —è–∑—ã–∫–æ–º –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –±–æ–ª–µ–µ —á–µ–º –≤ 60 —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞. –≠—Ç–æ —è–∑—ã–∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –Ω–∞—É–∫–∏ –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ.",
                Facts = new List<LanguageFact>
                {
                    new LanguageFact { Number = "01", Title = "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ", Text = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º –≤ –±–æ–ª–µ–µ —á–µ–º 50 —Å—Ç—Ä–∞–Ω–∞—Ö –∏ —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –≤—Ç–æ—Ä–æ–π —è–∑—ã–∫ –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏." },
                    new LanguageFact { Number = "02", Title = "–ë–æ–≥–∞—Ç—ã–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", Text = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏–º–µ–µ—Ç –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞, —Å –±–æ–ª–µ–µ —á–µ–º 1 –º–∏–ª–ª–∏–æ–Ω–æ–º —Å–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã." },
                    new LanguageFact { Number = "03", Title = "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ", Text = "–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –æ–∫–∞–∑–∞–ª–∏ –≤–ª–∏—è–Ω–∏–µ –º–Ω–æ–≥–∏–µ —è–∑—ã–∫–∏, –≤–∫–ª—é—á–∞—è –ª–∞—Ç–∏–Ω—Å–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π –∏ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–µ —è–∑—ã–∫–∏, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ –µ–≥–æ –±–æ–≥–∞—Ç–æ–º—É –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–º—É —Å–ª–æ–≤–∞—Ä–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É." },
                    new LanguageFact { Number = "04", Title = "–î–∏–∞–ª–µ–∫—Ç—ã –∏ –∞–∫—Ü–µ–Ω—Ç—ã", Text = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∏–∞–ª–µ–∫—Ç–æ–≤ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–≤, –æ—Ç –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∏ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –¥–æ –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ, –∫–∞–Ω–∞–¥—Å–∫–æ–≥–æ, –∏–Ω–¥–∏–π—Å–∫–æ–≥–æ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏." }
                }
            };
            
            return View("LanguageInfo", viewModel);
        }

        public async Task<IActionResult> Turkish()
        {
            ViewBag.IsDarkMode = _themeService.GetCurrentTheme();
            ViewBag.CurrentLanguage = _languageService.GetCurrentLanguage();
            ViewBag.IsAuthenticated = _authService.IsAuthenticated();
            
            // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ –µ–≥–æ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
            var language = await _context.Languages.FirstOrDefaultAsync(l => l.Code == "tr");
            var levels = new List<LanguageLevel>();
            
            if (language != null)
            {
                levels = await _context.LanguageLevels
                    .Where(l => l.LanguageId == language.Id)
                    .OrderBy(l => l.Level)
                    .ToListAsync();
                
                ViewBag.Language = language;
                ViewBag.Levels = levels;
            }
            
            var viewModel = new LanguageInfoViewModel
            {
                Name = "–¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫",
                NativeName = "T√ºrk√ße",
                SpeakersCount = "90+ –º–∏–ª–ª–∏–æ–Ω–æ–≤",
                Region = "–¢—É—Ä—Ü–∏—è –∏ –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫",
                FlagEmoji = "üáπüá∑",
                BannerImage = "/images/turkish_banner.jpg",
                Description = "–¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫ - —Ç—é—Ä–∫—Å–∫–∏–π —è–∑—ã–∫, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –¢—É—Ä—Ü–∏–∏. –ü–æ—Å–ª–µ —è–∑—ã–∫–æ–≤–æ–π —Ä–µ—Ñ–æ—Ä–º—ã –ê—Ç–∞—Ç—é—Ä–∫–∞ –≤ 1928 –≥–æ–¥—É –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç. –¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫ –∏–º–µ–µ—Ç –¥–æ–ª–≥—É—é –∏ –±–æ–≥–∞—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é, —è–≤–ª—è—è—Å—å –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–º –æ—Å–º–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ä–∞–∑–≤–∏–≤–∞—è—Å—å –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º –∞—Ä–∞–±—Å–∫–æ–≥–æ –∏ –ø–µ—Ä—Å–∏–¥—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤. –°–µ–≥–æ–¥–Ω—è —ç—Ç–æ –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ –∂–∏–≤–æ–π —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≥–æ–≤–æ—Ä—è—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –¢—É—Ä—Ü–∏–∏, –Ω–æ –∏ –≤ —á–∞—Å—Ç—è—Ö –ö–∏–ø—Ä–∞, –ë–∞–ª–∫–∞–Ω –∏ –¥–∏–∞—Å–ø–æ—Ä–∞—Ö –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.",
                Facts = new List<LanguageFact>
                {
                    new LanguageFact { Number = "01", Title = "–ê–≥–≥–ª—é—Ç–∏–Ω–∞—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫", Text = "–¢—É—Ä–µ—Ü–∫–∏–π —è–≤–ª—è–µ—Ç—Å—è –∞–≥–≥–ª—é—Ç–∏–Ω–∞—Ç–∏–≤–Ω—ã–º —è–∑—ã–∫–æ–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–æ–≤–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø—É—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –∫ –∫–æ—Ä–Ω—é —Å–ª–æ–≤–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –∏ —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ—Ä–Ω–µ–π." },
                    new LanguageFact { Number = "02", Title = "–ì–∞—Ä–º–æ–Ω–∏—è –≥–ª–∞—Å–Ω—ã—Ö", Text = "–ö–∞–∫ –∏ –∫–∞–∑–∞—Ö—Å–∫–∏–π, —Ç—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞–º –≥–∞—Ä–º–æ–Ω–∏–∏ –≥–ª–∞—Å–Ω—ã—Ö, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –¥–µ–ª–∞—è —è–∑—ã–∫ –±–æ–ª–µ–µ –º–µ–ª–æ–¥–∏—á–Ω—ã–º –∏ —Ä–∏—Ç–º–∏—á–Ω—ã–º." },
                    new LanguageFact { Number = "03", Title = "–ë–æ–≥–∞—Ç–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∞—è —Ç—Ä–∞–¥–∏—Ü–∏—è", Text = "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –±–æ–≥–∞—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é, –æ—Ç –æ—Å–º–∞–Ω—Å–∫–æ–π –ø–æ—ç–∑–∏–∏ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–æ–º–∞–Ω–æ–≤, –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ–º –º–∏—Ä–µ. –û—Ä—Ö–∞–Ω –ü–∞–º—É–∫, —Ç—É—Ä–µ—Ü–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å, –ø–æ–ª—É—á–∏–ª –ù–æ–±–µ–ª–µ–≤—Å–∫—É—é –ø—Ä–µ–º–∏—é –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ –≤ 2006 –≥–æ–¥—É." },
                    new LanguageFact { Number = "04", Title = "–Ø–∑—ã–∫–æ–≤–∞—è —Ä–µ—Ñ–æ—Ä–º–∞", Text = "–í 1928 –≥–æ–¥—É –ú—É—Å—Ç–∞—Ñ–∞ –ö–µ–º–∞–ª—å –ê—Ç–∞—Ç—é—Ä–∫ –ø—Ä–æ–≤–µ–ª –º–∞—Å—à—Ç–∞–±–Ω—É—é —è–∑—ã–∫–æ–≤—É—é —Ä–µ—Ñ–æ—Ä–º—É, –∑–∞–º–µ–Ω–∏–≤ –∞—Ä–∞–±—Å–∫–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –æ—á–∏—Å—Ç–∏–≤ —è–∑—ã–∫ –æ—Ç –º–Ω–æ–≥–∏—Ö –∞—Ä–∞–±—Å–∫–∏—Ö –∏ –ø–µ—Ä—Å–∏–¥—Å–∫–∏—Ö –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–π, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ –æ–±–ª–∏–∫ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞." }
                }
            };
            
            return View("LanguageInfo", viewModel);
        }
    }
} 