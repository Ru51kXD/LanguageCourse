using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Localization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using System.Globalization;
using WebApplication15.Models;
using WebApplication15.Services;
using WebApplication15.Data;
using System;
using System.Linq;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.Identity.UI;
using Microsoft.Extensions.Logging;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
internal class ProgramHelper { }

// –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
public static class Program
{
    public static void Main(string[] args)
    {
        CreateApplication(args);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private static void CreateApplication(string[] args)
    {
        var builder = WebApplication.CreateBuilder(args);

        // Add services to the container.
        builder.Services.AddControllersWithViews();
        builder.Services.AddHttpContextAccessor();

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        string connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
        if (string.IsNullOrEmpty(connectionString))
        {
            throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        builder.Services.AddDbContext<ApplicationDbContext>(options =>
            options.UseSqlServer(connectionString));

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        builder.Services.AddSession(options =>
        {
            options.IdleTimeout = TimeSpan.FromMinutes(30);
            options.Cookie.HttpOnly = true;
            options.Cookie.IsEssential = true;
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Identity
        builder.Services.AddIdentity<ApplicationUser, IdentityRole>(options => 
        {
            options.SignIn.RequireConfirmedAccount = false;
            options.Password.RequireDigit = false;
            options.Password.RequireLowercase = false;
            options.Password.RequireNonAlphanumeric = false;
            options.Password.RequireUppercase = false;
            options.Password.RequiredLength = 6;
        })
        .AddEntityFrameworkStores<ApplicationDbContext>()
        .AddDefaultTokenProviders();

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        builder.Services.AddScoped<AuthService>();
        builder.Services.AddScoped<LanguageService>();
        builder.Services.AddScoped<TestService>();
        builder.Services.AddScoped<ThemeService>();
        builder.Services.AddScoped<TestDataService>();
        builder.Services.AddScoped<VideoService>();
        builder.Services.AddScoped<WebApplication15.Models.LocalizationService>();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MVC —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        builder.Services.AddMvc()
            .AddViewLocalization()
            .AddDataAnnotationsLocalization(options =>
            {
                options.DataAnnotationLocalizerProvider = (type, factory) =>
                    factory.Create(typeof(LocalizationService));
            });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—É–ª—å—Ç—É—Ä
        builder.Services.Configure<RequestLocalizationOptions>(options =>
        {
            var supportedCultures = new[]
            {
                new CultureInfo("kk"),
                new CultureInfo("en"),
                new CultureInfo("tr")
            };

            options.DefaultRequestCulture = new RequestCulture("en");
            options.SupportedCultures = supportedCultures;
            options.SupportedUICultures = supportedCultures;
        });

        var app = builder.Build();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        using (var scope = app.Services.CreateScope())
        {
            var services = scope.ServiceProvider;
            var context = services.GetRequiredService<ApplicationDbContext>();
            context.Database.Migrate();
            
            var roleManager = services.GetRequiredService<RoleManager<IdentityRole>>();
            var userManager = services.GetRequiredService<UserManager<ApplicationUser>>();
            var logger = services.GetRequiredService<ILogger<ProgramHelper>>();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π
            string[] roleNames = { "Admin", "Teacher", "Student" };
            foreach (var roleName in roleNames)
            {
                if (!roleManager.RoleExistsAsync(roleName).Result)
                {
                    roleManager.CreateAsync(new IdentityRole(roleName)).Wait();
                }
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            var admin = userManager.FindByNameAsync("admin").Result;
            if (admin == null)
            {
                admin = new ApplicationUser
                {
                    UserName = "admin",
                    Email = "admin@example.com",
                    EmailConfirmed = true,
                    FirstName = "Admin",
                    LastName = "User",
                    RegistrationDate = DateTime.Now,
                    IsActive = true
                };
                
                userManager.CreateAsync(admin, "Admin123!").Wait();
                userManager.AddToRoleAsync(admin, "Admin").Wait();
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (!context.Languages.Any())
            {
                context.Languages.AddRange(
                    new Language { Name = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", Code = "en", Icon = "üá¨üáß" },
                    new Language { Name = "–ö–∞–∑–∞—Ö—Å–∫–∏–π", Code = "kk", Icon = "üá∞üáø" },
                    new Language { Name = "–¢—É—Ä–µ—Ü–∫–∏–π", Code = "tr", Icon = "üáπüá∑" },
                    new Language { Name = "–†—É—Å—Å–∫–∏–π", Code = "ru", Icon = "üá∑üá∫" }
                );
                context.SaveChanges();
                logger.LogInformation("–Ø–∑—ã–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —è–∑—ã–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (!context.LanguageLevels.Any())
            {
                var languages = context.Languages.ToList();
                var levels = new[] { "A1", "A2", "B1", "B2", "C1", "C2" };
                
                foreach (var language in languages)
                {
                    for (int i = 0; i < levels.Length; i++)
                    {
                        context.LanguageLevels.Add(new LanguageLevel
                        {
                            Name = levels[i],
                            Level = i + 1,
                            Description = GetLevelDescription(levels[i]),
                            LanguageId = language.Id
                        });
                    }
                }
                context.SaveChanges();
                logger.LogInformation("–£—Ä–æ–≤–Ω–∏ —è–∑—ã–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
            if (!context.Tests.Any())
            {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
                var testService = services.GetRequiredService<TestService>();
                testService.SeedDemoTestsAsync().Wait();
                logger.LogInformation("–î–µ–º–æ-—Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã");
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è
        string GetLevelDescription(string level)
        {
            return level switch
            {
                "A1" => "–ù–∞—á–∞–ª—å–Ω—ã–π",
                "A2" => "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π",
                "B1" => "–°—Ä–µ–¥–Ω–∏–π",
                "B2" => "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ",
                "C1" => "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                "C2" => "–°–≤–æ–±–æ–¥–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
            };
        }

        // Configure the HTTP request pipeline.
        if (app.Environment.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }
        else
        {
            app.UseExceptionHandler("/Home/Error");
            // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            app.UseHsts();
        }

        app.UseHttpsRedirection();
        app.UseStaticFiles();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ HTTP pipeline
        var localizationOptions = app.Services.GetService<IOptions<RequestLocalizationOptions>>();
        if (localizationOptions != null)
        {
            app.UseRequestLocalization(localizationOptions.Value);
        }

        app.UseRouting();
        app.UseAuthentication();
        app.UseAuthorization();

        app.UseSession();

        app.MapControllerRoute(
            name: "default",
            pattern: "{controller=Home}/{action=Index}/{id?}");

        app.Run();
    }
}
