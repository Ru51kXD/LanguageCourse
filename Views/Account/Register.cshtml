@model WebApplication15.Models.RegisterViewModel
@{
    ViewData["Title"] = "Регистрация";
    Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/login-vertical.css" asp-append-version="true" />
<style>
    /* Дополнительные стили для совместимости с шапкой */
    .top-navigation {
        z-index: 1000 !important;
        position: relative !important;
    }
    
    .main-nav {
        z-index: 1001 !important;
    }
    
    .auth-container {
        margin-top: 1rem !important;
    }
    
    /* Фиксируем шапку при прокрутке */
    html, body {
        overflow-x: hidden !important;
    }
    
    body {
        padding-top: 0 !important;
        margin-top: 0 !important;
    }
    
    .centered-content {
        padding-top: 0 !important;
    }
</style>

<div class="auth-container">
    <div class="login-vertical-header">
        <h1 class="vertical-title">
            <span class="text-gradient">Регистрация</span>
        </h1>
    </div>
    
    <div class="login-form-container">
        @if (!ViewData.ModelState.IsValid && ViewData.ModelState[""].Errors.Count > 0)
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in ViewData.ModelState[""].Errors)
                {
                    <p class="mb-0"><i class="fas fa-exclamation-circle me-2"></i>@error.ErrorMessage</p>
                }
            </div>
        }
        
        <form method="post" asp-controller="Account" asp-action="Register" class="login-form-animation">
            <div class="form-field">
                <label asp-for="Email" class="form-label">
                    <i class="fas fa-envelope me-2"></i> Email
                </label>
                <input asp-for="Email" class="form-control @(ViewData.ModelState["Email"]?.Errors.Count > 0 ? "is-invalid" : "")" required placeholder="Введите email">
                @if (ViewData.ModelState["Email"]?.Errors.Count > 0)
                {
                    <div class="invalid-feedback">
                        @foreach (var error in ViewData.ModelState["Email"].Errors)
                        {
                            <span>@error.ErrorMessage</span>
                        }
                    </div>
                }
            </div>
            
            <div class="form-field">
                <label asp-for="Password" class="form-label">
                    <i class="fas fa-lock me-2"></i> Пароль
                </label>
                <div class="password-input-container">
                    <input asp-for="Password" class="form-control @(ViewData.ModelState["Password"]?.Errors.Count > 0 ? "is-invalid" : "")" required placeholder="Введите пароль">
                    <button class="password-toggle" type="button" id="togglePassword">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                @if (ViewData.ModelState["Password"]?.Errors.Count > 0)
                {
                    <div class="invalid-feedback">
                        @foreach (var error in ViewData.ModelState["Password"].Errors)
                        {
                            <span>@error.ErrorMessage</span>
                        }
                    </div>
                }
            </div>
            
            <div class="form-field">
                <label asp-for="ConfirmPassword" class="form-label">
                    <i class="fas fa-lock me-2"></i> Подтверждение пароля
                </label>
                <div class="password-input-container">
                    <input asp-for="ConfirmPassword" class="form-control @(ViewData.ModelState["ConfirmPassword"]?.Errors.Count > 0 ? "is-invalid" : "")" required placeholder="Повторите пароль">
                    <button class="password-toggle" type="button" id="toggleConfirmPassword">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                @if (ViewData.ModelState["ConfirmPassword"]?.Errors.Count > 0)
                {
                    <div class="invalid-feedback">
                        @foreach (var error in ViewData.ModelState["ConfirmPassword"].Errors)
                        {
                            <span>@error.ErrorMessage</span>
                        }
                    </div>
                }
            </div>
            
            <div class="form-buttons">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-user-plus me-2"></i> Зарегистрироваться
                </button>
                <a asp-controller="Account" asp-action="Login" class="btn btn-outline-primary">
                    <i class="fas fa-sign-in-alt me-2"></i> Уже есть аккаунт? Войти
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Переключение видимости пароля
            const togglePassword = document.getElementById('togglePassword');
            const password = document.getElementById('Password');
            
            if (togglePassword && password) {
                togglePassword.addEventListener('click', function() {
                    const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
                    password.setAttribute('type', type);
                    togglePassword.querySelector('i').classList.toggle('fa-eye');
                    togglePassword.querySelector('i').classList.toggle('fa-eye-slash');
                });
            }
            
            // Переключение видимости подтверждения пароля
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const confirmPassword = document.getElementById('ConfirmPassword');
            
            if (toggleConfirmPassword && confirmPassword) {
                toggleConfirmPassword.addEventListener('click', function() {
                    const type = confirmPassword.getAttribute('type') === 'password' ? 'text' : 'password';
                    confirmPassword.setAttribute('type', type);
                    toggleConfirmPassword.querySelector('i').classList.toggle('fa-eye');
                    toggleConfirmPassword.querySelector('i').classList.toggle('fa-eye-slash');
                });
            }
            
            // Проверка совпадения паролей
            if (password && confirmPassword) {
                confirmPassword.addEventListener('input', function() {
                    if (password.value !== confirmPassword.value) {
                        confirmPassword.setCustomValidity('Пароли не совпадают');
                    } else {
                        confirmPassword.setCustomValidity('');
                    }
                });
                
                password.addEventListener('input', function() {
                    if (confirmPassword.value) {
                        if (password.value !== confirmPassword.value) {
                            confirmPassword.setCustomValidity('Пароли не совпадают');
                        } else {
                            confirmPassword.setCustomValidity('');
                        }
                    }
                });
            }
            
            // Анимация формы
            const formElements = document.querySelectorAll('.login-form-animation .form-control, .login-form-animation .btn');
            formElements.forEach((element, index) => {
                element.style.opacity = '0';
                element.style.transform = 'translateY(20px)';
                element.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                element.style.transitionDelay = (index * 0.1) + 's';
                
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, 100);
            });
        });
    </script>
} 