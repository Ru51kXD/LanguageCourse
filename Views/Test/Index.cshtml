@using Microsoft.AspNetCore.Localization
@model List<Test>
@{
    ViewData["Title"] = "Тесты";
    ViewData["IsDarkMode"] = ViewData["IsDarkMode"] ?? false;
    ViewData["CurrentLanguage"] = ViewData["CurrentLanguage"] ?? "ru";
    ViewData["IsAuthenticated"] = ViewData["IsAuthenticated"] ?? false;

    var languages = ViewData["Languages"] as List<Language> ?? new List<Language>();
    var levels = ViewData["Levels"] as List<LanguageLevel> ?? new List<LanguageLevel>();
    var filteredLevels = ViewData["FilteredLevels"] as List<LanguageLevel> ?? levels;
    var selectedLanguage = ViewData["SelectedLanguage"] as string;
    var selectedLanguageId = ViewData["SelectedLanguageId"] as int?;
    var selectedLevel = ViewData["SelectedLevel"] as string;
    var diagnosticCount = ViewData["DiagnosticCount"] as int?;
    
    // Получаем текущую культуру напрямую из Request
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    var culture = requestCulture?.RequestCulture.Culture.Name ?? "ru-RU";
    var currentCulture = requestCulture?.RequestCulture.Culture.TwoLetterISOLanguageName ?? "ru";

    // Получаем только уникальные названия уровней для фильтрации
    var uniqueLevels = filteredLevels?.Select(l => l.Name).Distinct().ToList() ?? 
                        new List<string>() { "A1", "A2", "B1", "B2", "C1", "C2" };

    // Группируем тесты по языкам
    var testsByLanguage = Model
        .GroupBy(t => t.LanguageLevel.Language.Name)
        .ToDictionary(g => g.Key, g => g.ToList());

    // Словарь для флагов языков
    var languageFlags = new Dictionary<string, string>
    {
        { "Английский", "🇬🇧" },
        { "Испанский", "🇪🇸" },
        { "Французский", "🇫🇷" },
        { "Немецкий", "🇩🇪" },
        { "Итальянский", "🇮🇹" },
        { "Португальский", "🇵🇹" },
        { "Нидерландский", "🇳🇱" },
        { "Ирландский", "🇮🇪" },
        { "Датский", "🇩🇰" },
        { "Шведский", "🇸🇪" },
        { "Норвежский", "🇳🇴" },
        { "Финский", "🇫🇮" },
        { "Польский", "🇵🇱" },
        { "Чешский", "🇨🇿" },
        { "Словацкий", "🇸🇰" },
        { "Венгерский", "🇭🇺" },
        { "Румынский", "🇷🇴" },
        { "Греческий", "🇬🇷" },
        { "Турецкий", "🇹🇷" },
        { "Иврит", "🇮🇱" },
        { "Арабский", "🇸🇦" },
        { "Хинди", "🇮🇳" },
        { "Вьетнамский", "🇻🇳" },
        { "Индонезийский", "🇮🇩" },
        { "Китайский", "🇨🇳" },
        { "Японский", "🇯🇵" },
        { "Корейский", "🇰🇷" },
        { "Русский", "🇷🇺" },
        { "Казахский", "🇰🇿" }
    };
    
    // Локализация для текстов страницы
    string titleText;
    string subtitleText;
    string chooseLanguageText;
    string chooseLevelText;
    string allLanguagesText;
    string allLevelsText;
    string testsNotFoundText;
    string testsNotFoundDescriptionText;
    string resetFilterText;
    string moreTestsText;
    string startTestText;
    string minutesText;
    string questionsText;
    string diagnosticText;
    string selectedLanguageText;
    string selectedLevelText;
    string availableLevelsText;
    
    // Мотивационные фразы
    string[] motivationalPhrasesRu = {
        "Учить язык - значит открывать новый мир! 🌎",
        "Каждый тест - шаг к свободному владению языком! 🚶‍♂️",
        "Не останавливайся на достигнутом! 🏆",
        "Регулярное тестирование - ключ к успеху! 🔑",
        "Тренируйся каждый день, и результат не заставит себя ждать! ⏱️",
        "Знание языков открывает многие двери! 🚪",
        "Ты на правильном пути к мастерству! 🛤️",
        "Мозг любит тесты! Проверь себя! 🧠",
        "Помни: практика ведет к совершенству! 💯",
        "Изучение языка меняет твой взгляд на мир! 👁️",
        "Новый язык - новая душа! ✨",
        "Проверь свои навыки прямо сейчас! 📝",
        "Языки сближают людей во всем мире! 🤝",
        "Твои усилия обязательно принесут плоды! 🌱"
    };
    
    string[] motivationalPhrasesKk = {
        "Тіл үйрену - жаңа әлемді ашу! 🌎",
        "Әр тест - тілді еркін меңгеруге қадам! 🚶‍♂️",
        "Қол жеткізгенге тоқтама! 🏆",
        "Тұрақты тестілеу - табысқа жету кілті! 🔑",
        "Күн сайын жаттығып, нәтиже күттірмейді! ⏱️",
        "Тілдерді білу көптеген есіктерді ашады! 🚪",
        "Сен шеберлікке дұрыс жолдасың! 🛤️",
        "Ми тесттерді жақсы көреді! Өзіңді тексер! 🧠",
        "Есіңде болсын: тәжірибе жетілдіреді! 💯",
        "Тіл үйрену әлемге көзқарасыңды өзгертеді! 👁️",
        "Жаңа тіл - жаңа жан! ✨",
        "Қазір дағдыларыңды тексер! 📝",
        "Тілдер әлемдегі адамдарды жақындатады! 🤝",
        "Сенің күш-жігерің міндетті түрде жеміс береді! 🌱"
    };
    
    string[] motivationalPhrasesEn = {
        "Learning a language means discovering a new world! 🌎",
        "Each test is a step towards language fluency! 🚶‍♂️",
        "Don't stop at what you've achieved! 🏆",
        "Regular testing is the key to success! 🔑",
        "Practice every day, and results won't keep you waiting! ⏱️",
        "Language knowledge opens many doors! 🚪",
        "You're on the right path to mastery! 🛤️",
        "Your brain loves tests! Check yourself! 🧠",
        "Remember: practice leads to perfection! 💯",
        "Learning a language changes your perspective on the world! 👁️",
        "New language - new soul! ✨",
        "Test your skills right now! 📝",
        "Languages bring people together around the world! 🤝",
        "Your efforts will definitely bear fruit! 🌱"
    };
    
    string[] motivationalPhrasesTr = {
        "Dil öğrenmek yeni bir dünya keşfetmek demektir! 🌎",
        "Her test, dil akıcılığına giden bir adımdır! 🚶‍♂️",
        "Elde ettiklerinle yetinme! 🏆",
        "Düzenli test başarının anahtarıdır! 🔑",
        "Her gün pratik yap, sonuçlar seni bekletmeyecek! ⏱️",
        "Dil bilgisi birçok kapıyı açar! 🚪",
        "Ustalığa giden doğru yoldasın! 🛤️",
        "Beynin testleri sever! Kendini kontrol et! 🧠",
        "Unutma: pratik mükemmelliğe götürür! 💯",
        "Dil öğrenmek dünyaya bakış açını değiştirir! 👁️",
        "Yeni dil - yeni ruh! ✨",
        "Becerilerini hemen test et! 📝",
        "Diller dünya çapında insanları bir araya getirir! 🤝",
        "Çabaların kesinlikle meyvesini verecek! 🌱"
    };
    
    string[] motivationalPhrases;
    
    // Устанавливаем тексты в зависимости от текущей культуры
    switch (culture)
    {
        case "ru-RU":
        case "ru":
            titleText = "Проверьте свои языковые навыки";
            subtitleText = "Наши онлайн-тесты помогут вам определить уровень владения языком и выявить области для улучшения. Выберите язык и уровень сложности ниже, чтобы начать.";
            chooseLanguageText = "Выберите язык";
            chooseLevelText = "Выберите уровень";
            allLanguagesText = "Все языки";
            allLevelsText = "Все уровни";
            testsNotFoundText = "Тесты не найдены";
            testsNotFoundDescriptionText = "К сожалению, по вашему запросу не найдено тестов. Попробуйте изменить параметры фильтра.";
            resetFilterText = "Сбросить фильтр";
            moreTestsText = "Еще тесты";
            startTestText = "Начать тест";
            minutesText = "мин.";
            questionsText = "вопросов";
            diagnosticText = "Диагностика: найдено";
            selectedLanguageText = "Выбранный язык:";
            selectedLevelText = "Выбранный уровень:";
            availableLevelsText = "Доступные уровни:";
            motivationalPhrases = motivationalPhrasesRu;
            break;
            
        case "kk-KZ":
        case "kk":
            titleText = "Тілдік дағдыларыңызды тексеріңіз";
            subtitleText = "Біздің онлайн-тесттер сізге тілді меңгеру деңгейін анықтауға және жақсарту үшін салаларды анықтауға көмектеседі. Бастау үшін төменде тілді және қиындық деңгейін таңдаңыз.";
            chooseLanguageText = "Тілді таңдаңыз";
            chooseLevelText = "Деңгейді таңдаңыз";
            allLanguagesText = "Барлық тілдер";
            allLevelsText = "Барлық деңгейлер";
            testsNotFoundText = "Тесттер табылмады";
            testsNotFoundDescriptionText = "Өкінішке орай, сұрауыңыз бойынша тесттер табылмады. Сүзгі параметрлерін өзгертіп көріңіз.";
            resetFilterText = "Сүзгіні қалпына келтіру";
            moreTestsText = "Тағы тесттер";
            startTestText = "Тестті бастау";
            minutesText = "мин.";
            questionsText = "сұрақтар";
            diagnosticText = "Диагностика: табылды";
            selectedLanguageText = "Таңдалған тіл:";
            selectedLevelText = "Таңдалған деңгей:";
            availableLevelsText = "Қол жетімді деңгейлер:";
            motivationalPhrases = motivationalPhrasesKk;
            break;
            
        case "en-US":
        case "en-GB":
        case "en":
            titleText = "Test Your Language Skills";
            subtitleText = "Our online tests will help you determine your language proficiency level and identify areas for improvement. Choose a language and difficulty level below to get started.";
            chooseLanguageText = "Choose Language";
            chooseLevelText = "Choose Level";
            allLanguagesText = "All Languages";
            allLevelsText = "All Levels";
            testsNotFoundText = "Tests Not Found";
            testsNotFoundDescriptionText = "Unfortunately, no tests were found for your request. Try changing the filter parameters.";
            resetFilterText = "Reset Filter";
            moreTestsText = "More Tests";
            startTestText = "Start Test";
            minutesText = "min.";
            questionsText = "questions";
            diagnosticText = "Diagnostic: found";
            selectedLanguageText = "Selected language:";
            selectedLevelText = "Selected level:";
            availableLevelsText = "Available levels:";
            motivationalPhrases = motivationalPhrasesEn;
            break;
            
        case "tr-TR":
        case "tr":
            titleText = "Dil Becerilerinizi Test Edin";
            subtitleText = "Çevrimiçi testlerimiz, dil yeterlilik seviyenizi belirlemenize ve geliştirilecek alanları tanımlamanıza yardımcı olacaktır. Başlamak için aşağıdan bir dil ve zorluk seviyesi seçin.";
            chooseLanguageText = "Dil Seçin";
            chooseLevelText = "Seviye Seçin";
            allLanguagesText = "Tüm Diller";
            allLevelsText = "Tüm Seviyeler";
            testsNotFoundText = "Test Bulunamadı";
            testsNotFoundDescriptionText = "Maalesef, isteğiniz için hiçbir test bulunamadı. Filtre parametrelerini değiştirmeyi deneyin.";
            resetFilterText = "Filtreyi Sıfırla";
            moreTestsText = "Daha Fazla Test";
            startTestText = "Testi Başlat";
            minutesText = "dk.";
            questionsText = "soru";
            diagnosticText = "Teşhis: bulundu";
            selectedLanguageText = "Seçilen dil:";
            selectedLevelText = "Seçilen seviye:";
            availableLevelsText = "Mevcut seviyeler:";
            motivationalPhrases = motivationalPhrasesTr;
            break;
            
        default:
            titleText = "Проверьте свои языковые навыки";
            subtitleText = "Наши онлайн-тесты помогут вам определить уровень владения языком и выявить области для улучшения. Выберите язык и уровень сложности ниже, чтобы начать.";
            chooseLanguageText = "Выберите язык";
            chooseLevelText = "Выберите уровень";
            allLanguagesText = "Все языки";
            allLevelsText = "Все уровни";
            testsNotFoundText = "Тесты не найдены";
            testsNotFoundDescriptionText = "К сожалению, по вашему запросу не найдено тестов. Попробуйте изменить параметры фильтра.";
            resetFilterText = "Сбросить фильтр";
            moreTestsText = "Еще тесты";
            startTestText = "Начать тест";
            minutesText = "мин.";
            questionsText = "вопросов";
            diagnosticText = "Диагностика: найдено";
            selectedLanguageText = "Выбранный язык:";
            selectedLevelText = "Выбранный уровень:";
            availableLevelsText = "Доступные уровни:";
            motivationalPhrases = motivationalPhrasesRu;
            break;
    }
    
    // Выбираем случайную фразу
    var randomPhrase = motivationalPhrases[new Random().Next(0, motivationalPhrases.Length)];
}

<link rel="stylesheet" href="~/css/tests.css" />
<link rel="stylesheet" href="~/css/duolingo-common.css" />
<link rel="stylesheet" href="~/css/character-animations.css" />

<div class="container-fluid">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h1 class="display-4">@titleText</h1>
                <p class="lead">@subtitleText</p>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <!-- Фильтры -->
    <div class="filters-container">
        <div class="filter-section">
            <h5 class="filter-heading" style="margin-top:75px">
                <i class="fas fa-globe"></i> 
                @chooseLanguageText
            </h5>
            <div class="filter-options" style="margin-top:20px">
                <a href="@Url.Action("Index", new { level = selectedLevel })" class="filter-option @(selectedLanguageId == null ? "active" : "")">
                    @allLanguagesText
                </a>
                @foreach (var language in languages)
                {
                    <a href="@Url.Action("Index", new { languageId = language.Id, level = selectedLevel })" 
                       class="filter-option @(selectedLanguageId == language.Id ? "active" : "")">
                        @if (languageFlags.ContainsKey(language.Name))
                        {
                            <span class="filter-icon">@languageFlags[language.Name]</span>
                        }
                        @language.Name
                    </a>
                }
            </div>
        </div>
        
        <div class="filter-section">
            <h5 class="filter-heading" style="margin-top:25px">
                <i class="fas fa-layer-group"></i>
                @chooseLevelText
            </h5>
            <div class="filter-options" style="margin-top:20px; margin-bottom:20px">
                <a href="@Url.Action("Index", new { languageId = selectedLanguageId })" class="filter-option @(selectedLevel == null ? "active" : "")">
                    @allLevelsText
                </a>
                @foreach (var levelName in uniqueLevels)
                {
                    <a href="@Url.Action("Index", new { languageId = selectedLanguageId, level = levelName })" 
                       class="filter-option @(selectedLevel == levelName ? "active" : "")">
                        <span class="level-badge">@levelName</span>
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Диагностическая информация (для отладки) -->
    <div class="alert alert-info">
        <p>@diagnosticText @(diagnosticCount ?? 0) тестов с выбранными фильтрами</p>
        <p>@selectedLanguageText @(selectedLanguage ?? "Не выбран")</p>
        <p>@selectedLevelText @(selectedLevel ?? "Не выбран")</p>
        <p>@availableLevelsText @(string.Join(", ", uniqueLevels ?? new List<string>()))</p>
    </div>

    <!-- Списки тестов по языкам -->
    <div class="language-sections">
        @if (!testsByLanguage.Any())
        {
            <div class="empty-tests-message">
                <i class="fas fa-book"></i>
                <h3>@testsNotFoundText</h3>
                <p>@testsNotFoundDescriptionText</p>
                <a href="@Url.Action("Index")" class="btn btn-primary">@resetFilterText</a>
            </div>
        }
        else
        {
            foreach (var languageGroup in testsByLanguage)
            {
                string languageName = languageGroup.Key;
                var testsForLanguage = languageGroup.Value;
                string flag = languageFlags.ContainsKey(languageName) ? languageFlags[languageName] : "🌎";
                
                <div class="language-section" data-language="@languageName">
                    <div class="section-header">
                        <h2>
                            <span class="language-flag">@flag</span>
                            @languageName
                        </h2>
                        <a href="#" class="view-more">@moreTestsText <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="demo-tests-grid">
                        @{
                            var animationOrder = 0;
                        }
                        @foreach (var test in testsForLanguage)
                        {
                            string levelName = test.LanguageLevel?.Name ?? "Unknown";
                            
                            <div class="demo-test-card" style="--animation-order: @animationOrder" data-level="@levelName">
                                <div class="demo-test-header">
                                    <div class="demo-test-language">
                                        <span class="language-flag">@flag</span>
                                        @languageName
                                        <span class="level-badge">@levelName</span>
                                    </div>
                                </div>
                                <div class="demo-test-content">
                                    <h3 class="demo-test-title">@test.Title</h3>
                                    <p class="demo-test-description">@test.Description</p>
                                    <div class="demo-test-meta">
                                        <span><i class="fas fa-clock"></i> @test.TimeLimit @minutesText</span>
                                        <span><i class="fas fa-question-circle"></i> @(test.Questions?.Count ?? 0) @questionsText</span>
                                    </div>
                                </div>
                                <div class="demo-test-footer">
                                    <a href="@Url.Action("StartTest", "Test", new { id = test.Id })" class="duolingo-button">
                                        @startTestText <i class="fas fa-arrow-right"></i>
                                    </a>
                                </div>
                            </div>
                            
                            animationOrder++;
                        }
                    </div>
                </div>
            }
        }
    </div>
    
    <!-- Фиксированный персонаж Duo внизу страницы -->
    <div class="duo-character position-fixed" id="fixedDuo" style="bottom: 20px; right: 150px; z-index: 1000; cursor: pointer; display: block !important; opacity: 1 !important; visibility: visible !important; pointer-events: auto !important">
        <div class="duo-speech" id="duoSpeech" style="transition: opacity 0.3s ease, transform 0.3s ease; color: #333 !important;"></div>
        <div style="font-size: 80px; text-align: center;">🙂</div>
    </div>
</div>

@section Scripts {
    <script>
        // Проверка, что скрипт не выполняется дважды
        if (!window.duoScriptInitialized) {
            window.duoScriptInitialized = true;
            
            document.addEventListener('DOMContentLoaded', function() {
                console.log('DOM полностью загружен, инициализируем скрипт');
                
                // Существующий код
                const filterOptions = document.querySelectorAll('.filter-option');
                filterOptions.forEach(option => {
                    option.addEventListener('click', function() {
                        filterOptions.forEach(o => o.classList.remove('active'));
                        this.classList.add('active');
                    });
                });
                
                // Для диагностического блока
                setTimeout(function() {
                    const diagnosticInfo = document.querySelector('.alert-info');
                    if (diagnosticInfo) {
                        diagnosticInfo.style.display = 'none';
                    }
                }, 5000);
                
                // Персонаж с сообщениями
                const duoCharacter = document.getElementById('fixedDuo');
                const characterBubble = document.getElementById('duoSpeech');
                
                console.log('DuoCharacter:', duoCharacter);
                console.log('CharacterBubble:', characterBubble);
                
                if (!duoCharacter || !characterBubble) {
                    console.error('Персонаж или пузырь с сообщением не найдены!');
                    return;
                }
                
                // Переменная для отслеживания, показывается ли сообщение сейчас
                let isMessageShowing = false;
                let messageTimeout;
                
                // Добавляем переменную для отслеживания времени последнего сообщения
                let lastMessageTime = 0;
                
                // Функция для проверки, можно ли показать новое сообщение
                function canShowNewMessage() {
                    const currentTime = new Date().getTime();
                    const timeSinceLastMessage = currentTime - lastMessageTime;
                    
                    // Если прошло меньше 3 секунд с последнего сообщения, блокируем показ нового
                    return timeSinceLastMessage >= 3000 || lastMessageTime === 0;
                }
                
                // Функция для показа сообщения от персонажа
                function showCharacterBubble(text) {
                    if (!characterBubble || !duoCharacter) return;
                    
                    // Проверяем, можно ли показать новое сообщение
                    if (!canShowNewMessage()) {
                        console.log('Слишком рано для нового сообщения, игнорируем');
                        return;
                    }
                    
                    // Обновляем время последнего сообщения
                    lastMessageTime = new Date().getTime();
                    
                    // Если уже есть активное сообщение, сначала очищаем таймер
                    if (isMessageShowing && messageTimeout) {
                        clearTimeout(messageTimeout);
                    }
                    
                    console.log('Показываем сообщение:', text);
                    // Используем innerHTML вместо textContent для корректного отображения эмодзи и кириллицы
                    characterBubble.innerHTML = text;
                    
                    // Добавляем класс active для отображения
                    characterBubble.classList.add('active');
                    characterBubble.style.opacity = '1';
                    characterBubble.style.transform = 'translateY(0)';
                    characterBubble.style.pointerEvents = 'auto';
                    
                    // Отмечаем, что сообщение показывается
                    isMessageShowing = true;
                    
                    // Добавляем анимацию пульсации персонажу
                    duoCharacter.classList.add('pulse');
                    
                    // Через 300мс убираем пульсацию
                    setTimeout(() => {
                        duoCharacter.classList.remove('pulse');
                    }, 300);
                    
                    // Скрываем сообщение через 1,5 секунды
                    messageTimeout = setTimeout(() => {
                        characterBubble.classList.remove('active');
                        characterBubble.style.opacity = '0';
                        characterBubble.style.transform = 'translateY(10px)';
                        characterBubble.style.pointerEvents = 'none';
                        isMessageShowing = false;
                    }, 3000);
                }
                
                // Функция для запуска автоматического показа сообщений
                function startAutoMessagesInterval() {
                    // Если интервал уже установлен, сначала очищаем его
                    if (autoMessageInterval) {
                        clearInterval(autoMessageInterval);
                    }
                    
                    // Устанавливаем новый интервал (каждые 20 секунд)
                    autoMessageInterval = setInterval(() => {
                        // Если все сообщения были показаны, сбрасываем массив
                        if (usedAutoMessages.length >= autoMessages.length) {
                            usedAutoMessages = [];
                        }
                        
                        // Выбираем сообщение, которое еще не было показано
                        let message;
                        do {
                            message = autoMessages[Math.floor(Math.random() * autoMessages.length)];
                        } while (usedAutoMessages.includes(message));
                        
                        // Добавляем сообщение в список показанных
                        usedAutoMessages.push(message);
                        
                        // Показываем сообщение
                        showCharacterBubble(message);
                    }, 20000); // 20 секунд между сообщениями
                }
                
                // Определяем сообщения в зависимости от языка
                let currentCulture = '@currentCulture';
                
                // Сократим сообщения для лучшего отображения
                const autoMessages = getAutoMessages(currentCulture);
                
                // Приветственные сообщения при загрузке страницы
                const welcomeMessages = getWelcomeMessages(currentCulture);
                
                // Сообщения при клике на персонаже
                const clickMessages = getClickMessages(currentCulture);
                
                // Сообщения при наведении на карточки тестов
                const hoverMessages = getHoverMessages(currentCulture);
                
                // Функция для получения сообщений в зависимости от языка
                function getAutoMessages(culture) {
                    switch(culture) {
                        case 'ru':
                            return [
                                'Регулярное тестирование улучшает память! 📚',
                                'Не забывай повторять материал! 🔄',
                                'Удачи с тестами! 🍀',
                                'Молодец, что учишься! 👏',
                                'Языки - это увлекательное путешествие! 🌍',
                                'Даже малый прогресс важен! 🚶',
                                'Ошибки - часть обучения! 😊',
                                'Учи что-то новое каждый день! 🆕',
                                'Повторение - мать учения! 🔄',
                                'У каждого свой темп обучения! 🏃',
                                'Твой мозг любит новые вызовы! 🧠',
                                'Знания остаются с тобой навсегда! 💪',
                                'Сосредоточься на качестве! ⏱️',
                                'Всего 15 минут в день для успеха! ⏰',
                                'Изучение языка расширяет кругозор! 🌈',
                                'С каждым днем ты лучше! 📈'
                            ];
                        case 'kk':
                            return [
                                'Тұрақты тестілеу жадыңызды жақсартады! 📚',
                                'Материалды қайталауды ұмытпаңыз! 🔄',
                                'Тесттерде сәттілік тілеймін! 🍀',
                                'Оқығаныңыз үшін жарайсыз! 👏',
                                'Тілдер - қызықты саяхат! 🌍',
                                'Тіпті аз прогресс те маңызды! 🚶',
                                'Қателер - оқу процесінің бөлігі! 😊',
                                'Күн сайын жаңа нәрсе үйреніңіз! 🆕',
                                'Қайталау - оқу анасы! 🔄',
                                'Әр адамның өз оқу қарқыны бар! 🏃',
                                'Миыңыз жаңа қиындықтарды ұнатады! 🧠',
                                'Білім әрқашан сізбен бірге! 💪',
                                'Сапаға назар аударыңыз! ⏱️',
                                'Күніне тек 15 минут жетістікке! ⏰',
                                'Тіл үйрену көкжиегіңізді кеңейтеді! 🌈',
                                'Күн сайын жақсарып келесіз! 📈'
                            ];
                        case 'en':
                            return [
                                'Regular testing improves memory! 📚',
                                'Don\'t forget to review material! 🔄',
                                'Good luck with the tests! 🍀',
                                'Well done for learning! 👏',
                                'Languages are an exciting journey! 🌍',
                                'Even small progress is important! 🚶',
                                'Mistakes are part of learning! 😊',
                                'Learn something new every day! 🆕',
                                'Repetition is the mother of learning! 🔄',
                                'Everyone has their own learning pace! 🏃',
                                'Your brain loves new challenges! 🧠',
                                'Knowledge stays with you forever! 💪',
                                'Focus on quality! ⏱️',
                                'Just 15 minutes a day for success! ⏰',
                                'Learning a language broadens your horizons! 🌈',
                                'You get better every day! 📈'
                            ];
                        case 'tr':
                            return [
                                'Düzenli test hafızayı geliştirir! 📚',
                                'Malzemeyi gözden geçirmeyi unutma! 🔄',
                                'Testlerde başarılar! 🍀',
                                'Öğrendiğin için aferin! 👏',
                                'Diller heyecan verici bir yolculuktur! 🌍',
                                'Küçük ilerleme bile başarıya doğru bir adımdır! 🚶',
                                'Hatalar öğrenmenin bir parçasıdır! 😊',
                                'Her gün yeni bir şey öğren! 🆕',
                                'Tekrar öğrenmenin anasıdır! 🔄',
                                'Herkesin kendi öğrenme hızı vardır! 🏃',
                                'Beynin yeni zorlukları sever! 🧠',
                                'Bilgi sonsuza kadar seninle kalır! 💪',
                                'Kaliteye odaklan! ⏱️',
                                'Başarı için günde sadece 15 dakika! ⏰',
                                'Dil öğrenmek ufkunuzu genişletir! 🌈',
                                'Her gün daha iyiye gidiyorsun! 📈'
                            ];
                        default:
                            return [
                                'Регулярное тестирование улучшает память! 📚',
                                'Не забывай повторять материал! 🔄',
                                'Удачи с тестами! 🍀',
                                'Молодец, что учишься! 👏',
                                'Языки - это увлекательное путешествие! 🌍',
                                'Даже малый прогресс важен! 🚶',
                                'Ошибки - часть обучения! 😊',
                                'Учи что-то новое каждый день! 🆕',
                                'Повторение - мать учения! 🔄',
                                'У каждого свой темп обучения! 🏃',
                                'Твой мозг любит новые вызовы! 🧠',
                                'Знания остаются с тобой навсегда! 💪',
                                'Сосредоточься на качестве! ⏱️',
                                'Всего 15 минут в день для успеха! ⏰',
                                'Изучение языка расширяет кругозор! 🌈',
                                'С каждым днем ты лучше! 📈'
                            ];
                    }
                }
                
                function getWelcomeMessages(culture) {
                    switch(culture) {
                        case 'ru':
                            return [
                                'Привет! Рад видеть тебя снова! 👋',
                                'Добро пожаловать в языковой центр! 🎓',
                                'Готов к новым достижениям? 🚀',
                                'Какой язык будем изучать сегодня? 🌐',
                                'Ты молодец, что учишься! 👍'
                            ];
                        case 'kk':
                            return [
                                'Сәлем! Сізді қайта көргеніме қуаныштымын! 👋',
                                'Тіл орталығына қош келдіңіз! 🎓',
                                'Жаңа жетістіктерге дайынсыз ба? 🚀',
                                'Бүгін қай тілді үйренеміз? 🌐',
                                'Оқып жатқаның үшін жарайсың! 👍'
                            ];
                        case 'en':
                            return [
                                'Hello! Glad to see you again! 👋',
                                'Welcome to the language center! 🎓',
                                'Ready for new achievements? 🚀',
                                'Which language shall we learn today? 🌐',
                                'Well done for studying! 👍'
                            ];
                        case 'tr':
                            return [
                                'Merhaba! Seni tekrar görmek güzel! 👋',
                                'Dil merkezine hoş geldiniz! 🎓',
                                'Yeni başarılara hazır mısın? 🚀',
                                'Bugün hangi dili öğreneceğiz? 🌐',
                                'Çalışma için harika! 👍'
                            ];
                        default:
                            return [
                                'Привет! Рад видеть тебя снова! 👋',
                                'Добро пожаловать в языковой центр! 🎓',
                                'Готов к новым достижениям? 🚀',
                                'Какой язык будем изучать сегодня? 🌐',
                                'Ты молодец, что учишься! 👍'
                            ];
                    }
                }
                
                function getClickMessages(culture) {
                    switch(culture) {
                        case 'ru':
                            return [
                                'Регулярное тестирование помогает лучше запоминать слова! 📚',
                                'Не забывай повторять пройденный материал! 🔄',
                                'Удачи с тестами! 🍀',
                                'Ты молодец, что учишься! 👏',
                                'Изучение языка - это увлекательное путешествие! 🌍',
                                'Даже небольшой прогресс - это шаг к успеху! 🚶',
                                'Ошибки - это часть обучения! Не бойся их! 😊',
                                'Каждый день учи что-то новое! 🆕',
                                'Повторение - мать учения! 🔄',
                                'Не сравнивай себя с другими, у каждого свой темп! 🏃',
                                'Твой мозг любит новые вызовы! 🧠',
                                'Знания, полученные на тестах, останутся с тобой навсегда! 💪'
                            ];
                        case 'kk':
                            return [
                                'Тұрақты тестілеу сөздерді жақсы есте сақтауға көмеkтеседі! 📚',
                                'Өткен материалды қайталауды ұмытпаңыз! 🔄',
                                'Тесттерде сәттілік тілеймін! 🍀',
                                'Оқып жатқаның үшін жарайсың! 👏',
                                'Тілді үйрену - қызықты саяхат! 🌍',
                                'Тіпті шағын прогресс - бұл жетістікке қадам! 🚶',
                                'Қателер - оқу процесінің бөлігі! Олардан қорықпаңыз! 😊',
                                'Күн сайын жаңа нәрсе үйреніңіз! 🆕',
                                'Қайталау - оқу анасы! 🔄',
                                'Өзіңді басқалармен салыстырма, әркімнің өз қарқыны бар! 🏃',
                                'Миыңыз жаңа қиындықтарды ұнатады! 🧠',
                                'Тесттерде алған білім сізбен мәңгі қалады! 💪'
                            ];
                        case 'en':
                            return [
                                'Regular testing helps you remember words better! 📚',
                                'Don\'t forget to review what you\'ve learned! 🔄',
                                'Good luck with the tests! 🍀',
                                'Well done for learning! 👏',
                                'Learning a language is an exciting journey! 🌍',
                                'Even small progress is a step towards success! 🚶',
                                'Mistakes are part of learning! Don\'t fear them! 😊',
                                'Learn something new every day! 🆕',
                                'Repetition is the mother of learning! 🔄',
                                'Don\'t compare yourself to others, everyone has their own pace! 🏃',
                                'Your brain loves new challenges! 🧠',
                                'Knowledge gained from tests will stay with you forever! 💪'
                            ];
                        case 'tr':
                            return [
                                'Düzenli test, kelimeleri daha iyi hatırlamanıza yardımcı olur! 📚',
                                'Öğrendiklerinizi gözden geçirmeyi unutmayın! 🔄',
                                'Testlerde başarılar! 🍀',
                                'Öğrendiğin için aferin! 👏',
                                'Dil öğrenmek heyecan verici bir yolculuktur! 🌍',
                                'Küçük ilerleme bile başarıya doğru bir adımdır! 🚶',
                                'Hatalar öğrenmenin bir parçasıdır! Onlardan korkma! 😊',
                                'Her gün yeni bir şey öğren! 🆕',
                                'Tekrar öğrenmenin anasıdır! 🔄',
                                'Kendini başkalarıyla karşılaştırma, herkesin kendi hızı var! 🏃',
                                'Beynin yeni zorlukları sever! 🧠',
                                'Testlerden kazanılan bilgi sonsuza dek seninle kalacak! 💪'
                            ];
                        default:
                            return [
                                'Регулярное тестирование помогает лучше запоминать слова! 📚',
                                'Не забывай повторять пройденный материал! 🔄',
                                'Удачи с тестами! 🍀',
                                'Ты молодец, что учишься! 👏',
                                'Изучение языка - это увлекательное путешествие! 🌍',
                                'Даже небольшой прогресс - это шаг к успеху! 🚶',
                                'Ошибки - это часть обучения! Не бойся их! 😊',
                                'Каждый день учи что-то новое! 🆕',
                                'Повторение - мать учения! 🔄',
                                'Не сравнивай себя с другими, у каждого свой темп! 🏃',
                                'Твой мозг любит новые вызовы! 🧠',
                                'Знания, полученные на тестах, останутся с тобой навсегда! 💪'
                            ];
                    }
                }
                
                function getHoverMessages(culture) {
                    switch(culture) {
                        case 'ru':
                            return [
                                'Отличный выбор! 👍',
                                'Попробуй пройти этот тест! 🎯',
                                'Этот тест поможет проверить навыки! 📚',
                                'Готов проверить себя? 💪',
                                'Хороший тест для твоего уровня! ⭐',
                                'Этот тест - отличная тренировка! 🏋️',
                                'Проверь свои знания с этим тестом! 🧐',
                                'Не помешает немного практики! 🔄'
                            ];
                        case 'kk':
                            return [
                                'Тамаша таңдау! 👍',
                                'Бұл тестті өтіп көріңіз! 🎯',
                                'Бұл тест дағдыларыңызды тексеруге көмеkтеседі! 📚',
                                'Өзіңді тексеруге дайынсың ба? 💪',
                                'Деңгейіңіз үшін жақсы тест! ⭐',
                                'Бұл тест - керемет жаттығу! 🏋️',
                                'Білімді осы тестпен тексер! 🧐',
                                'Біраз тәжірибе алу артық болмайды! 🔄'
                            ];
                        case 'en':
                            return [
                                'Excellent choice! 👍',
                                'Try taking this test! 🎯',
                                'This test will help check your skills! 📚',
                                'Ready to test yourself? 💪',
                                'Great test for your level! ⭐',
                                'This test is excellent practice! 🏋️',
                                'Check your knowledge with this test! 🧐',
                                'A bit of practice won\'t hurt! 🔄'
                            ];
                        case 'tr':
                            return [
                                'Mükemmel seçim! 👍',
                                'Bu testi denemeye ne dersin! 🎯',
                                'Bu test becerilerinizi kontrol etmenize yardımcı olacak! 📚',
                                'Kendini test etmeye hazır mısın? 💪',
                                'Seviyeniz için harika bir test! ⭐',
                                'Bu test mükemmel bir alıştırmadır! 🏋️',
                                'Bu testle bilgini kontrol et! 🧐',
                                'Biraz pratik zarar vermez! 🔄'
                            ];
                        default:
                            return [
                                'Отличный выбор! 👍',
                                'Попробуй пройти этот тест! 🎯',
                                'Этот тест поможет проверить навыки! 📚',
                                'Готов проверить себя? 💪',
                                'Хороший тест для твоего уровня! ⭐',
                                'Этот тест - отличная тренировка! 🏋️',
                                'Проверь свои знания с этим тестом! 🧐',
                                'Не помешает немного практики! 🔄'
                            ];
                    }
                }
                
                // Массив для отслеживания уже показанных автоматических сообщений
                let usedAutoMessages = [];
                let usedWelcomeMessages = [];
                let autoMessageInterval = null;
                
                // Показываем персонажа с приветствием
                setTimeout(() => {
                    // Выбираем случайное приветствие
                    let welcomeMessage;
                    if (usedWelcomeMessages.length >= welcomeMessages.length) {
                        usedWelcomeMessages = [];
                    }
                    
                    do {
                        welcomeMessage = welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];
                    } while (usedWelcomeMessages.includes(welcomeMessage));
                    
                    usedWelcomeMessages.push(welcomeMessage);
                    
                    // Показываем приветствие
                    console.log('Показываем приветствие:', welcomeMessage);
                    showCharacterBubble(welcomeMessage);
                    
                    // После приветствия устанавливаем интервал для автоматического показа сообщений
                    // Небольшая задержка, чтобы успеть прочитать приветствие
                    setTimeout(() => {
                        startAutoMessagesInterval();
                    }, 5000); // 5 секунд после приветствия
                }, 1000);
                
                // Массив для отслеживания уже показанных сообщений
                let usedClickMessages = [];
                
                // Массив для отслеживания уже показанных сообщений при наведении
                let usedHoverMessages = [];
                
                // Переменная для хранения таймера задержки при наведении
                let hoverTimer = null;
                
                // Добавляем обработчики на карточки тестов для показа сообщений при наведении
                document.querySelectorAll('.demo-test-card').forEach(card => {
                    card.addEventListener('mouseenter', () => {
                        // Используем таймер задержки, чтобы не реагировать на слишком быстрые перемещения мыши
                        if (hoverTimer) {
                            clearTimeout(hoverTimer);
                        }
                        
                        hoverTimer = setTimeout(() => {
                            // Проверяем, можно ли показать новое сообщение
                            if (!canShowNewMessage()) {
                                console.log('Слишком рано для нового сообщения, игнорируем наведение');
                                return;
                            }
                        
                            const testTitle = card.querySelector('.demo-test-title')?.textContent || 'этот тест';
                            console.log('Наведение на карточку:', testTitle);
                            
                            // Если все сообщения были показаны, сбрасываем массив
                            if (usedHoverMessages.length >= hoverMessages.length) {
                                usedHoverMessages = [];
                            }
                            
                            // Выбираем сообщение, которое еще не было показано
                            let randomMessage;
                            do {
                                randomMessage = hoverMessages[Math.floor(Math.random() * hoverMessages.length)];
                            } while (usedHoverMessages.includes(randomMessage));
                            
                            // Добавляем сообщение в список показанных
                            usedHoverMessages.push(randomMessage);
                            
                            characterBubble.innerHTML = `"${testTitle}" - ${randomMessage}`;
                            
                            // Обновляем время последнего сообщения
                            lastMessageTime = new Date().getTime();
                            
                            // Отображаем сообщение с анимацией
                            characterBubble.classList.add('active');
                            characterBubble.style.opacity = '1';
                            characterBubble.style.transform = 'translateY(0)';
                            characterBubble.style.pointerEvents = 'auto';
                            isMessageShowing = true;
                            
                            duoCharacter.classList.add('pulse');
                            setTimeout(() => {
                                duoCharacter.classList.remove('pulse');
                            }, 300);
                            
                            // Скрываем сообщение через 1,5 секунды
                            messageTimeout = setTimeout(() => {
                                characterBubble.classList.remove('active');
                                characterBubble.style.opacity = '0';
                                characterBubble.style.transform = 'translateY(10px)';
                                characterBubble.style.pointerEvents = 'none';
                                isMessageShowing = false;
                            }, 3000);
                        }, 300); // Задержка для наведения, чтобы не реагировать на быстрые перемещения мыши
                    });
                    
                    // Добавляем обработчик для отмены таймера, если мышь ушла с карточки
                    card.addEventListener('mouseleave', () => {
                        if (hoverTimer) {
                            clearTimeout(hoverTimer);
                            hoverTimer = null;
                        }
                    });
                });
                
                // Показываем сообщение при клике на Duo
                duoCharacter.addEventListener('click', function() {
                    console.log('Клик по персонажу');
                    
                    // Если уже есть активное сообщение, сначала очищаем таймер
                    if (messageTimeout) {
                        clearTimeout(messageTimeout);
                    }
                    
                    // Если все сообщения были показаны, сбрасываем массив
                    if (usedClickMessages.length >= clickMessages.length) {
                        usedClickMessages = [];
                    }
                    
                    // Выбираем сообщение, которое еще не было показано
                    let randomMessage;
                    do {
                        randomMessage = clickMessages[Math.floor(Math.random() * clickMessages.length)];
                    } while (usedClickMessages.includes(randomMessage));
                    
                    // Добавляем сообщение в список показанных
                    usedClickMessages.push(randomMessage);
                    
                    // Напрямую используем innerHTML для отображения сообщения
                    characterBubble.innerHTML = randomMessage;
                    
                    // Обновляем время последнего сообщения
                    lastMessageTime = new Date().getTime();
                    
                    // Отображаем сообщение с анимацией
                    characterBubble.classList.add('active');
                    characterBubble.style.opacity = '1';
                    characterBubble.style.transform = 'translateY(0)';
                    characterBubble.style.pointerEvents = 'auto';
                    isMessageShowing = true;
                    
                    duoCharacter.classList.add('pulse');
                    setTimeout(() => {
                        duoCharacter.classList.remove('pulse');
                    }, 300);
                    
                    // Скрываем сообщение через 1,5 секунды
                    messageTimeout = setTimeout(() => {
                        characterBubble.classList.remove('active');
                        characterBubble.style.opacity = '0';
                        characterBubble.style.transform = 'translateY(10px)';
                        characterBubble.style.pointerEvents = 'none';
                        isMessageShowing = false;
                    }, 3000);
                });
            });
        }
    </script>
    
    <style>
        /* Жесткое переопределение стилей для пузырька сообщений */
        .duo-speech.active {
            opacity: 1 !important;
            transform: translateY(0) !important;
            pointer-events: auto !important;
            background-color: white !important;
            color: #333 !important;
            z-index: 1001 !important;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2) !important;
            border: 1px solid rgba(0, 0, 0, 0.1) !important;
            left: auto !important;
            right: 150px !important; /* Сдвигаем левее (было 130px) */
            display: block !important;
            visibility: visible !important;
            min-width: 280px !important; /* Увеличиваем минимальную ширину */
            max-width: 350px !important; /* Увеличиваем максимальную ширину */
            padding: 20px !important; /* Одинаковые отступы сверху и снизу вместо 15px 20px */
            border-radius: 15px !important;
            font-weight: 600 !important;
            font-size: 1rem !important;
            text-align: center !important;
            animation: bounceIn 0.5s ease-out !important;
            bottom: 100px !important;
            position: absolute !important;
            left: 50% !important; /* Центрируем относительно персонажа */
            transform: translateX(-50%) !important; /* Центрируем относительно персонажа */
            word-wrap: break-word !important; /* Для длинных слов */
            line-height: 1.4 !important; /* Улучшаем высоту строки */
            display: flex !important; /* Для вертикального центрирования текста */
            align-items: center !important; /* Вертикальное центрирование */
            justify-content: center !important; /* Горизонтальное центрирование */
        }
        
        /* При наведении сохраняем стили, только если не активен */
        .duo-character:hover .duo-speech:not(.active) {
            opacity: 0 !important;
            transform: translateY(10px) translateX(-50%) !important;
        }
        
        /* Принудительно скрываем пузырь до активации */
        .duo-speech:not(.active) {
            opacity: 0 !important;
            transform: translateY(10px) translateX(-50%) !important;
            pointer-events: none !important;
            position: absolute !important;
            bottom: 100px !important;
            left: 50% !important;
        }
        
        /* Добавляем анимацию для выделения персонажа */
        .duo-character.pulse {
            animation: pulseAnim 0.5s ease-in-out !important;
        }
        
        /* Стиль для речевого пузыря после содержимого */
        .duo-speech.active:after {
            content: '' !important;
            position: absolute !important;
            bottom: -10px !important;
            left: 50% !important; /* Центрируем указатель пузыря */
            transform: translateX(-50%) !important; /* Центрируем указатель пузыря */
            border-width: 10px 10px 0 !important;
            border-style: solid !important;
            border-color: white transparent transparent !important;
        }
        
        /* Улучшенный стиль для персонажа */
        #fixedDuo {
            transition: all 0.3s ease !important;
            filter: drop-shadow(0 5px 10px rgba(0, 0, 0, 0.15)) !important;
            position: fixed !important;
            bottom: 20px !important;
            right: 150px !important; /* Сдвигаем левее (было 130px) */
            z-index: 1000 !important;
            width: 80px !important;
            height: auto !important;
        }
        
        #fixedDuo:hover {
            transform: translateY(-5px) !important;
        }

        .duo-speech {
            position: absolute;
            bottom: 130px;
            left: 50%;
            transform: translateX(-50%);
            max-width: 300px;
            background: #fff;
            padding: 15px;
            border-radius: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 14px;
            text-align: center;
            line-height: 1.4;
            z-index: 100;
        }

        .duo-speech:after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 10px solid transparent;
            border-right: 10px solid transparent;
            border-top: 10px solid #fff;
        }

        /* Стиль для анимации персонажа */
        .character-container {
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 100px;
            height: 100px;
            z-index: 99;
            cursor: pointer;
            transition: transform 0.3s;
        }

        .character-container:hover {
            transform: scale(1.1);
        }

        .character-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
    </style>
} 