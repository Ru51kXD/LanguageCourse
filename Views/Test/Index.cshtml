@model List<Test>
@{
    ViewData["Title"] = "–¢–µ—Å—Ç—ã";
    ViewData["IsDarkMode"] = ViewData["IsDarkMode"] ?? false;
    ViewData["CurrentLanguage"] = ViewData["CurrentLanguage"] ?? "ru";
    ViewData["IsAuthenticated"] = ViewData["IsAuthenticated"] ?? false;

    var languages = ViewData["Languages"] as List<Language> ?? new List<Language>();
    var levels = ViewData["Levels"] as List<LanguageLevel> ?? new List<LanguageLevel>();
    var filteredLevels = ViewData["FilteredLevels"] as List<LanguageLevel> ?? levels;
    var selectedLanguage = ViewData["SelectedLanguage"] as string;
    var selectedLanguageId = ViewData["SelectedLanguageId"] as int?;
    var selectedLevel = ViewData["SelectedLevel"] as string;
    var diagnosticCount = ViewData["DiagnosticCount"] as int?;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    var uniqueLevels = filteredLevels?.Select(l => l.Name).Distinct().ToList() ?? 
                        new List<string>() { "A1", "A2", "B1", "B2", "C1", "C2" };

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ —è–∑—ã–∫–∞–º
    var testsByLanguage = Model
        .GroupBy(t => t.LanguageLevel.Language.Name)
        .ToDictionary(g => g.Key, g => g.ToList());

    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–ª–∞–≥–æ–≤ —è–∑—ã–∫–æ–≤
    var languageFlags = new Dictionary<string, string>
    {
        { "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "üá¨üáß" },
        { "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "üá™üá∏" },
        { "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "üá´üá∑" },
        { "–ù–µ–º–µ—Ü–∫–∏–π", "üá©üá™" },
        { "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "üáÆüáπ" },
        { "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", "üáµüáπ" },
        { "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π", "üá≥üá±" },
        { "–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π", "üáÆüá™" },
        { "–î–∞—Ç—Å–∫–∏–π", "üá©üá∞" },
        { "–®–≤–µ–¥—Å–∫–∏–π", "üá∏üá™" },
        { "–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π", "üá≥üá¥" },
        { "–§–∏–Ω—Å–∫–∏–π", "üá´üáÆ" },
        { "–ü–æ–ª—å—Å–∫–∏–π", "üáµüá±" },
        { "–ß–µ—à—Å–∫–∏–π", "üá®üáø" },
        { "–°–ª–æ–≤–∞—Ü–∫–∏–π", "üá∏üá∞" },
        { "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π", "üá≠üá∫" },
        { "–†—É–º—ã–Ω—Å–∫–∏–π", "üá∑üá¥" },
        { "–ì—Ä–µ—á–µ—Å–∫–∏–π", "üá¨üá∑" },
        { "–¢—É—Ä–µ—Ü–∫–∏–π", "üáπüá∑" },
        { "–ò–≤—Ä–∏—Ç", "üáÆüá±" },
        { "–ê—Ä–∞–±—Å–∫–∏–π", "üá∏üá¶" },
        { "–•–∏–Ω–¥–∏", "üáÆüá≥" },
        { "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π", "üáªüá≥" },
        { "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π", "üáÆüá©" },
        { "–ö–∏—Ç–∞–π—Å–∫–∏–π", "üá®üá≥" },
        { "–Ø–ø–æ–Ω—Å–∫–∏–π", "üáØüáµ" },
        { "–ö–æ—Ä–µ–π—Å–∫–∏–π", "üá∞üá∑" },
        { "–†—É—Å—Å–∫–∏–π", "üá∑üá∫" },
        { "–ö–∞–∑–∞—Ö—Å–∫–∏–π", "üá∞üáø" }
    };
    
    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    var motivationalPhrases = new string[] {
        "–£—á–∏—Ç—å —è–∑—ã–∫ - –∑–Ω–∞—á–∏—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–∏—Ä!",
        "–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç - —à–∞–≥ –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –≤–ª–∞–¥–µ–Ω–∏—é —è–∑—ã–∫–æ–º!",
        "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è –Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º!",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
        "–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å!"
    };
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
    var randomPhrase = motivationalPhrases[new Random().Next(0, motivationalPhrases.Length)];
}

<link rel="stylesheet" href="~/css/tests.css" />

<div class="container-fluid">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h1 class="display-4">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏</h1>
                <p class="lead">–ù–∞—à–∏ –æ–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –∏ –≤—ã—è–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</p>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <!-- –§–∏–ª—å—Ç—Ä—ã -->
    <div class="filters-container">
        <div class="filter-section">
            <h5 class="filter-heading" style="margin-top:75px">
                <i class="fas fa-globe"></i> 
                –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫
            </h5>
            <div class="filter-options" style="margin-top:20px">
                <a href="@Url.Action("Index", new { level = selectedLevel })" class="filter-option @(selectedLanguageId == null ? "active" : "")">
                    –í—Å–µ —è–∑—ã–∫–∏
                </a>
                @foreach (var language in languages)
                {
                    <a href="@Url.Action("Index", new { languageId = language.Id, level = selectedLevel })" 
                       class="filter-option @(selectedLanguageId == language.Id ? "active" : "")">
                        @if (languageFlags.ContainsKey(language.Name))
                        {
                            <span class="filter-icon">@languageFlags[language.Name]</span>
                        }
                        @language.Name
                    </a>
                }
            </div>
        </div>
        
        <div class="filter-section">
            <h5 class="filter-heading" style="margin-top:25px">
                <i class="fas fa-layer-group"></i>
                –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å
            </h5>
            <div class="filter-options" style="margin-top:20px; margin-bottom:20px">
                <a href="@Url.Action("Index", new { languageId = selectedLanguageId })" class="filter-option @(selectedLevel == null ? "active" : "")">
                    –í—Å–µ —É—Ä–æ–≤–Ω–∏
                </a>
                @foreach (var levelName in uniqueLevels)
                {
                    <a href="@Url.Action("Index", new { languageId = selectedLanguageId, level = levelName })" 
                       class="filter-option @(selectedLevel == levelName ? "active" : "")">
                        <span class="level-badge">@levelName</span>
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) -->
    <div class="alert alert-info">
        <p>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –Ω–∞–π–¥–µ–Ω–æ @(diagnosticCount ?? 0) —Ç–µ—Å—Ç–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</p>
        <p>–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: @(selectedLanguage ?? "–ù–µ –≤—ã–±—Ä–∞–Ω")</p>
        <p>–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: @(selectedLevel ?? "–ù–µ –≤—ã–±—Ä–∞–Ω")</p>
        <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: @(string.Join(", ", uniqueLevels ?? new List<string>()))</p>
    </div>

    <!-- –°–ø–∏—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ —è–∑—ã–∫–∞–º -->
    <div class="language-sections">
        @if (!testsByLanguage.Any())
        {
            <div class="empty-tests-message">
                <i class="fas fa-book"></i>
                <h3>–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞.</p>
                <a href="@Url.Action("Index")" class="btn btn-primary">–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä</a>
            </div>
        }
        else
        {
            foreach (var languageGroup in testsByLanguage)
            {
                string languageName = languageGroup.Key;
                var testsForLanguage = languageGroup.Value;
                string flag = languageFlags.ContainsKey(languageName) ? languageFlags[languageName] : "üåé";
                
                <div class="language-section" data-language="@languageName">
                    <div class="section-header">
                        <h2>
                            <span class="language-flag">@flag</span>
                            @languageName
                        </h2>
                        <a href="#" class="view-more">–ï—â–µ —Ç–µ—Å—Ç—ã <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="demo-tests-grid">
                        @{
                            var animationOrder = 0;
                        }
                        @foreach (var test in testsForLanguage)
                        {
                            string levelName = test.LanguageLevel?.Name ?? "Unknown";
                            
                            <div class="demo-test-card" style="--animation-order: @animationOrder" data-level="@levelName">
                                <div class="demo-test-header">
                                    <div class="demo-test-language">
                                        <span class="language-flag">@flag</span>
                                        @languageName
                                        <span class="level-badge">@levelName</span>
                                    </div>
                                </div>
                                <div class="demo-test-content">
                                    <h3 class="demo-test-title">@test.Title</h3>
                                    <p class="demo-test-description">@test.Description</p>
                                    <div class="demo-test-meta">
                                        <span><i class="fas fa-clock"></i> @test.TimeLimit –º–∏–Ω.</span>
                                        <span><i class="fas fa-question-circle"></i> @(test.Questions?.Count ?? 0) –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                                    </div>
                                </div>
                                <div class="demo-test-footer">
                                    <a href="@Url.Action("StartTest", "Test", new { id = test.Id })" class="duolingo-button">
                                        –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç <i class="fas fa-arrow-right"></i>
                                    </a>
                                </div>
                            </div>
                            
                            animationOrder++;
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ Duo –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
<div class="duo-character position-fixed" id="fixedDuo" style="bottom: 20px; right: 20px; z-index: 1000; cursor: pointer;">
    <div class="duo-speech" id="duoSpeech"></div>
    <div style="font-size: 80px; text-align: center;">üôÇ</div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Duo –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            showDuoMessage('@randomPhrase');
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Duo
            function showDuoMessage(message) {
                $('#duoSpeech').text(message).fadeIn(300);
                setTimeout(function() {
                    $('#duoSpeech').fadeOut(300);
                }, 5000);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ Duo
            $('#fixedDuo').click(function() {
                var messages = [
                    '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–ª–æ–≤–∞!',
                    '–ù–µ –∑–∞–±—ã–≤–∞–π –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª!',
                    '–£–¥–∞—á–∏ —Å —Ç–µ—Å—Ç–∞–º–∏!',
                    '–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —É—á–∏—à—å—Å—è!',
                    '–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!'
                ];
                var randomMessage = messages[Math.floor(Math.random() * messages.length)];
                showDuoMessage(randomMessage);
            });
        });
    </script>
} 