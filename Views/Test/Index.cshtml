@model List<Test>
@{
    ViewData["Title"] = "–¢–µ—Å—Ç—ã";
    ViewData["IsDarkMode"] = ViewData["IsDarkMode"] ?? false;
    ViewData["CurrentLanguage"] = ViewData["CurrentLanguage"] ?? "ru";
    ViewData["IsAuthenticated"] = ViewData["IsAuthenticated"] ?? false;

    var languages = ViewData["Languages"] as List<Language> ?? new List<Language>();
    var levels = ViewData["Levels"] as List<LanguageLevel> ?? new List<LanguageLevel>();
    var selectedLanguage = ViewData["SelectedLanguage"] as string;
    var selectedLevel = ViewData["SelectedLevel"] as string;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ —è–∑—ã–∫–∞–º
    var testsByLanguage = Model
        .GroupBy(t => t.LanguageLevel.Language.Name)
        .ToDictionary(g => g.Key, g => g.ToList());

    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–ª–∞–≥–æ–≤ —è–∑—ã–∫–æ–≤
    var languageFlags = new Dictionary<string, string>
    {
        { "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "üá¨üáß" },
        { "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "üá™üá∏" },
        { "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "üá´üá∑" },
        { "–ù–µ–º–µ—Ü–∫–∏–π", "üá©üá™" },
        { "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "üáÆüáπ" },
        { "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", "üáµüáπ" },
        { "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π", "üá≥üá±" },
        { "–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π", "üáÆüá™" },
        { "–î–∞—Ç—Å–∫–∏–π", "üá©üá∞" },
        { "–®–≤–µ–¥—Å–∫–∏–π", "üá∏üá™" },
        { "–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π", "üá≥üá¥" },
        { "–§–∏–Ω—Å–∫–∏–π", "üá´üáÆ" },
        { "–ü–æ–ª—å—Å–∫–∏–π", "üáµüá±" },
        { "–ß–µ—à—Å–∫–∏–π", "üá®üáø" },
        { "–°–ª–æ–≤–∞—Ü–∫–∏–π", "üá∏üá∞" },
        { "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π", "üá≠üá∫" },
        { "–†—É–º—ã–Ω—Å–∫–∏–π", "üá∑üá¥" },
        { "–ì—Ä–µ—á–µ—Å–∫–∏–π", "üá¨üá∑" },
        { "–¢—É—Ä–µ—Ü–∫–∏–π", "üáπüá∑" },
        { "–ò–≤—Ä–∏—Ç", "üáÆüá±" },
        { "–ê—Ä–∞–±—Å–∫–∏–π", "üá∏üá¶" },
        { "–•–∏–Ω–¥–∏", "üáÆüá≥" },
        { "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π", "üáªüá≥" },
        { "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π", "üáÆüá©" },
        { "–ö–∏—Ç–∞–π—Å–∫–∏–π", "üá®üá≥" },
        { "–Ø–ø–æ–Ω—Å–∫–∏–π", "üáØüáµ" },
        { "–ö–æ—Ä–µ–π—Å–∫–∏–π", "üá∞üá∑" },
        { "–†—É—Å—Å–∫–∏–π", "üá∑üá∫" },
        { "–ö–∞–∑–∞—Ö—Å–∫–∏–π", "üá∞üáø" }
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    var allLanguages = testsByLanguage.Keys.ToList();
    var allLevels = new List<string>() { "A1", "A2", "B1", "B2", "C1", "C2" };
    
    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    var motivationalPhrases = new string[] {
        "–£—á–∏—Ç—å —è–∑—ã–∫ - –∑–Ω–∞—á–∏—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –º–∏—Ä!",
        "–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç - —à–∞–≥ –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –≤–ª–∞–¥–µ–Ω–∏—é —è–∑—ã–∫–æ–º!",
        "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è –Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º!",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
        "–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å!"
    };
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
    var randomPhrase = motivationalPhrases[new Random().Next(0, motivationalPhrases.Length)];
}

<link rel="stylesheet" href="~/css/tests.css" />

<div class="container-fluid">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h1 class="display-4">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏</h1>
                <p class="lead">–ù–∞—à–∏ –æ–Ω–ª–∞–π–Ω-—Ç–µ—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –∏ –≤—ã—è–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</p>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <!-- –§–∏–ª—å—Ç—Ä—ã -->
    <div class="filters-container">
        <div class="filter-section">
            <h5 class="filter-heading" style="margin-top:75px">
                <i class="fas fa-globe"></i> 
                –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫
            </h5>
            <div class="filter-options" style="margin-top:20px">
                <a href="#" class="filter-option active" data-language="all">
                    –í—Å–µ —è–∑—ã–∫–∏
                </a>
                @foreach (var language in allLanguages)
                {
                    <a href="#" class="filter-option" data-language="@language">
                        @if (languageFlags.ContainsKey(language))
                        {
                            <span class="filter-icon">@languageFlags[language]</span>
                        }
                        @language
                    </a>
                }
            </div>
        </div>
        
        <div class="filter-section">
            <h5 class="filter-heading" style="margin-top:25px">
                <i class="fas fa-layer-group"></i>
                –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å
            </h5>
            <div class="filter-options" style="margin-top:20px; margin-bottom:20px">
                <a href="#" class="filter-option active" data-level="all">
                    –í—Å–µ —É—Ä–æ–≤–Ω–∏
                </a>
                <a href="#" class="filter-option" data-level="A1">
                    <span class="level-badge">A1</span>
                </a>
                <a href="#" class="filter-option" data-level="A2">
                    <span class="level-badge">A2</span>
                </a>
                <a href="#" class="filter-option" data-level="B1">
                    <span class="level-badge">B1</span>
                </a>
                <a href="#" class="filter-option" data-level="B2">
                    <span class="level-badge">B2</span>
                </a>
                <a href="#" class="filter-option" data-level="C1">
                    <span class="level-badge">C1</span>
                </a>
                <a href="#" class="filter-option" data-level="C2">
                    <span class="level-badge">C2</span>
                </a>
            </div>
        </div>
    </div>
        
    <!-- –°–ø–∏—Å–∫–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ —è–∑—ã–∫–∞–º -->
    <div class="language-sections">
        @if (!testsByLanguage.Any())
        {
            <div class="empty-tests-message">
                <i class="fas fa-book"></i>
                <h3>–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ—Å—Ç—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>
            </div>
        }
        else
        {
            foreach (var languageGroup in testsByLanguage)
            {
                string languageName = languageGroup.Key;
                var testsForLanguage = languageGroup.Value;
                string flag = languageFlags.ContainsKey(languageName) ? languageFlags[languageName] : "üåé";
                
                <div class="language-section" data-language="@languageName">
                    <div class="section-header">
                        <h2>
                            <span class="language-flag">@flag</span>
                            @languageName
                        </h2>
                        <a href="#" class="view-more">–ï—â–µ —Ç–µ—Å—Ç—ã <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="demo-tests-grid">
                        @{
                            var animationOrder = 0;
                        }
                        @foreach (var test in testsForLanguage)
                        {
                            string levelName = test.LanguageLevel?.Level.ToString() ?? "Unknown";
                            
                            <div class="demo-test-card" style="--animation-order: @animationOrder" data-level="@levelName">
                                <div class="demo-test-header">
                                    <div class="demo-test-language">
                                        <span class="language-flag">@flag</span>
                                        @languageName
                                        <span class="level-badge">@levelName</span>
                                    </div>
                                </div>
                                <div class="demo-test-content">
                                    <h3 class="demo-test-title">@test.Title</h3>
                                    <p class="demo-test-description">@test.Description</p>
                                    <div class="demo-test-meta">
                                        <span><i class="fas fa-clock"></i> @test.TimeLimit –º–∏–Ω.</span>
                                        <span><i class="fas fa-question-circle"></i> @(test.Questions?.Count ?? 0) –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                                    </div>
                                </div>
                                <div class="demo-test-footer">
                                    <a href="@Url.Action("StartTest", "Test", new { id = test.Id })" class="duolingo-button">
                                        –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç <i class="fas fa-arrow-right"></i>
                                    </a>
                                </div>
                            </div>
                            
                            animationOrder++;
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ Duo –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
<div class="duo-character position-fixed" id="fixedDuo" style="bottom: 20px; right: 20px; z-index: 1000; cursor: pointer;">
    <div class="duo-speech" id="duoSpeech"></div>
    <div style="font-size: 80px; text-align: center;">üôÇ</div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —è–∑—ã–∫—É
            $('.filter-option[data-language]').click(function(e) {
                e.preventDefault();
                $('.filter-option[data-language]').removeClass('active');
                $(this).addClass('active');
                
                var selectedLanguage = $(this).data('language');
                
                if (selectedLanguage === 'all') {
                    $('.language-section').fadeIn(300);
                } else {
                    $('.language-section').hide();
                    $('.language-section[data-language="' + selectedLanguage + '"]').fadeIn(300);
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ Duo
                if (selectedLanguage !== 'all') {
                    showDuoMessage('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –Ø–∑—ã–∫ ' + selectedLanguage + ' –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!');
                } else {
                    showDuoMessage('–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω!');
                }
            });
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
            $('.filter-option[data-level]').click(function(e) {
                e.preventDefault();
                $('.filter-option[data-level]').removeClass('active');
                $(this).addClass('active');
                
                var selectedLevel = $(this).data('level');
                
                if (selectedLevel === 'all') {
                    $('.demo-test-card').fadeIn(300);
                } else {
                    $('.demo-test-card').hide();
                    $('.demo-test-card[data-level="' + selectedLevel + '"]').fadeIn(300);
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Duo –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è
                if (selectedLevel !== 'all') {
                    const levelMessages = {
                        'A1': '–£—Ä–æ–≤–µ–Ω—å A1 - –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞!',
                        'A2': '–ù–∞ —É—Ä–æ–≤–Ω–µ A2 —Ç—ã —É–∂–µ —Å–º–æ–∂–µ—à—å –≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã!',
                        'B1': '–£—Ä–æ–≤–µ–Ω—å B1 - —ç—Ç–æ —É–∂–µ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å, —Ç—ã –º–æ–ª–æ–¥–µ—Ü!',
                        'B2': 'B2 - –æ—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!',
                        'C1': 'C1 - –ø–æ—á—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!',
                        'C2': 'C2 - —Ç—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–æ—Å–∏—Ç–µ–ª—å —è–∑—ã–∫–∞!'
                    };
                    showDuoMessage(levelMessages[selectedLevel] || '–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é.');
                }
            });
            
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π Duo
            function showDuoMessage(message) {
                const duoSpeech = document.getElementById('duoSpeech');
                duoSpeech.textContent = message;
                duoSpeech.classList.add('show');
                
                setTimeout(() => {
                    duoSpeech.classList.remove('show');
                }, 5000);
            }
            
            // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            $('#fixedDuo').click(function() {
                const encouragingMessages = [
                    '–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é!',
                    '–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞!',
                    '–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç - —ç—Ç–æ —à–∞–≥ –≤–ø–µ—Ä–µ–¥!',
                    '–ù–µ –±–æ–π—Å—è –æ—à–∏–±–æ–∫, –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç —É—á–∏—Ç—å—Å—è!',
                    '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –∏ —É–ø–æ—Ä—Å—Ç–≤–æ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É!'
                ];
                
                const randomIndex = Math.floor(Math.random() * encouragingMessages.length);
                showDuoMessage(encouragingMessages[randomIndex]);
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            setTimeout(() => {
                const welcomeMessages = [
                    '–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?',
                    '–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!',
                    '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è!',
                    '–ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å!',
                    '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!',
                    '–ü—Ä–æ–π–¥–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ —É–ª—É—á—à–∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!'
                ];
                
                const randomIndex = Math.floor(Math.random() * welcomeMessages.length);
                showDuoMessage(welcomeMessages[randomIndex]);
            }, 1000);
        });
    </script>
} 