@model List<WebApplication15.Models.TestResult>
@{
    ViewData["Title"] = "–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    var totalTests = ViewData["TotalTests"] as int? ?? 0;
    var averageScore = ViewData["AverageScore"] as double? ?? 0;
    var bestResult = ViewData["BestResult"] as double? ?? 0;
    var languageProgress = ViewData["LanguageProgress"] as Dictionary<string, dynamic>;
    
    // –°–ª–æ–≤–∞—Ä—å —Ñ–ª–∞–≥–æ–≤ –¥–ª—è —è–∑—ã–∫–æ–≤
    var languageFlags = new Dictionary<string, string>
    {
        { "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "üá¨üáß" },
        { "–ö–∞–∑–∞—Ö—Å–∫–∏–π", "üá∞üáø" },
        { "–¢—É—Ä–µ—Ü–∫–∏–π", "üáπüá∑" },
        { "–†—É—Å—Å–∫–∏–π", "üá∑üá∫" },
    };
    
    // –°–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    var resultColors = new Dictionary<string, string>();
    resultColors.Add("excellent", "rgba(76, 175, 80, 0.8)"); // –ó–µ–ª–µ–Ω—ã–π
    resultColors.Add("good", "rgba(33, 150, 243, 0.8)"); // –°–∏–Ω–∏–π
    resultColors.Add("average", "rgba(255, 152, 0, 0.8)"); // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    resultColors.Add("poor", "rgba(244, 67, 54, 0.8)"); // –ö—Ä–∞—Å–Ω—ã–π
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —è–∑—ã–∫–∞–º –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    var languageData = Model.GroupBy(r => r.Language)
        .Select(g => new { Language = g.Key, Count = g.Count() })
        .ToDictionary(x => x.Language, x => x.Count);
        
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    var levelData = Model.GroupBy(r => r.Level)
        .Select(g => new { Level = g.Key, Count = g.Count() })
        .ToDictionary(x => x.Level, x => x.Count);
}

<link rel="stylesheet" href="~/css/tests.css" />
<link rel="stylesheet" href="~/css/user-results.css" />

<div class="duolingo-page-container">
    <div class="duolingo-hero">
        <div class="container">
            <h1>–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h1>
            <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤</p>
        </div>
    </div>

    <div class="container mb-5">
        <!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="duolingo-stats-section">
            <div class="row">
                <div class="col-md-3">
                    <div class="stats-card">
                        <div class="stats-icon">
                            <i class="fas fa-tasks"></i>
                        </div>
                        <div class="stats-info">
                            <div class="stats-value">@totalTests</div>
                            <div class="stats-label">–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card">
                        <div class="stats-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <div class="stats-info">
                            <div class="stats-value">@Math.Round(averageScore, 1)%</div>
                            <div class="stats-label">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card">
                        <div class="stats-icon">
                            <i class="fas fa-trophy"></i>
                        </div>
                        <div class="stats-info">
                            <div class="stats-value">@Math.Round(bestResult, 1)%</div>
                            <div class="stats-label">–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card">
                        <div class="stats-icon">
                            <i class="fas fa-globe"></i>
                        </div>
                        <div class="stats-info">
                            <div class="stats-value">@(languageProgress?.Count ?? 0)</div>
                            <div class="stats-label">–ò–∑—É—á–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —è–∑—ã–∫–∞–º -->
        @if (languageProgress != null && languageProgress.Any())
        {
            <div class="duolingo-section-title mt-5">
                <h2>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —è–∑—ã–∫–∞–º</h2>
                <p>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤</p>
            </div>
            
            <div class="language-progress-section">
                <div class="row">
                    <div class="col-md-8">
                        <div class="language-progress-chart">
                            <canvas id="languageProgressChart"></canvas>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="language-stats">
                            @foreach (var lang in languageProgress)
                            {
                                <div class="language-stat-item">
                                    <div class="language-name">
                                        @if (languageFlags.ContainsKey(lang.Key))
                                        {
                                            <span class="language-flag">@languageFlags[lang.Key]</span>
                                        }
                                        @lang.Key
                                    </div>
                                    <div class="language-details">
                                        <div class="language-detail">
                                            <span class="detail-label">–¢–µ—Å—Ç–æ–≤:</span>
                                            <span class="detail-value">@lang.Value.Count</span>
                                        </div>
                                        <div class="language-detail">
                                            <span class="detail-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</span>
                                            <span class="detail-value">@Math.Round(lang.Value.AverageScore, 1)%</span>
                                        </div>
                                        <div class="language-detail">
                                            <span class="detail-label">–£—Ä–æ–≤–µ–Ω—å:</span>
                                            <span class="detail-value level-badge">@lang.Value.HighestLevel</span>
                                        </div>
                                    </div>
                                    <div class="progress language-progress">
                                        <div class="progress-bar" role="progressbar" style="width: @Math.Round(lang.Value.AverageScore, 0)%" 
                                            aria-valuenow="@Math.Round(lang.Value.AverageScore, 0)" aria-valuemin="0" aria-valuemax="100">
                                            @Math.Round(lang.Value.AverageScore, 0)%
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <!-- –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -->
        <div class="duolingo-section-title mt-5">
            <h2>–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>
            <p>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö</p>
        </div>
        
        @if (Model.Any())
        {
            <div class="test-results-table">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>–î–∞—Ç–∞</th>
                            <th>–Ø–∑—ã–∫</th>
                            <th>–£—Ä–æ–≤–µ–Ω—å</th>
                            <th>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</th>
                            <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
                            <th>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö</th>
                            <th>–í—Å–µ–≥–æ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in Model)
                        {
                            string resultClass = "";
                            if (result.Percentage >= 90) resultClass = "excellent";
                            else if (result.Percentage >= 70) resultClass = "good";
                            else if (result.Percentage >= 50) resultClass = "average";
                            else resultClass = "poor";
                            
                            <tr>
                                <td>@result.CompletedDate.ToString("dd.MM.yyyy HH:mm")</td>
                                <td>
                                    @if (languageFlags.ContainsKey(result.Language))
                                    {
                                        <span class="language-flag">@languageFlags[result.Language]</span>
                                    }
                                    @result.Language
                                </td>
                                <td><span class="level-badge">@result.Level</span></td>
                                <td>@result.Title</td>
                                <td>
                                    <div class="result-badge @resultClass">
                                        @Math.Round(result.Percentage, 0)%
                                    </div>
                                </td>
                                <td>@result.CorrectAnswers</td>
                                <td>@result.TotalQuestions</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="duolingo-empty-state">
                <img src="~/images/empty-state.svg" alt="–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" class="empty-state-image">
                <h3>–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h3>
                <p>–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.</p>
                <a href="@Url.Action("Index", "Test")" class="duolingo-button">
                    <i class="fas fa-tasks me-2"></i> –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
            const languageData = @Html.Raw(Json.Serialize(languageData));
            const levelData = @Html.Raw(Json.Serialize(levelData));
            
            // –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            const colors = [
                'rgba(33, 150, 243, 0.7)',
                'rgba(76, 175, 80, 0.7)',
                'rgba(255, 152, 0, 0.7)',
                'rgba(244, 67, 54, 0.7)',
                'rgba(156, 39, 176, 0.7)',
                'rgba(0, 188, 212, 0.7)'
            ];
            
            // –ì—Ä–∞—Ñ–∏–∫ –ø–æ —è–∑—ã–∫–∞–º
            if (Object.keys(languageData).length > 0) {
                const ctxLanguage = document.getElementById('languageProgressChart').getContext('2d');
                new Chart(ctxLanguage, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(languageData),
                        datasets: [{
                            label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤',
                            data: Object.values(languageData),
                            backgroundColor: colors,
                            borderColor: colors.map(c => c.replace('0.7', '1')),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ —è–∑—ã–∫–∞–º'
                            }
                        }
                    }
                });
            }
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            function animateElements() {
                const elements = document.querySelectorAll('.stats-card, .language-stat-item, .test-results-table');
                elements.forEach((el, index) => {
                    setTimeout(() => {
                        el.style.opacity = '1';
                        el.style.transform = 'translateY(0)';
                    }, 100 * index);
                });
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(animateElements, 300);
        });
    </script>
} 