@model WebApplication15.Models.Test
@{
    ViewData["Title"] = Model.Title;
}

<div class="page-animation">
    <div class="row mb-4">
        <div class="col-md-12">
            <h1>@Model.Title</h1>
            <p>@Model.Description</p>
            <p>Уровень: @Model.LanguageLevel?.Name</p>
            <p>Всего вопросов: @Model.Questions.Count</p>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <form id="testForm">
                        <input type="hidden" id="testId" value="@Model.Id" />
                        
                        @foreach (var question in Model.Questions)
                        {
                            <div class="question-container mb-4">
                                <h3>@question.Text</h3>
                                
                                <div class="mt-3">
                                    <div class="options-list">
                                        @foreach (var option in question.Options)
                                        {
                                            <div class="form-check mb-3">
                                                <input type="radio" 
                                                       class="form-check-input" 
                                                       name="question_@question.Id" 
                                                       id="option_@option.Id" 
                                                       value="@option.Text" />
                                                <label class="form-check-label" for="option_@option.Id">
                                                    @option.Text
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <div class="mt-4">
                            <button type="button" id="submitTest" class="btn btn-primary">Завершить тест</button>
                            <a asp-controller="Test" asp-action="Index" asp-route-languageId="@Model.LanguageLevel?.LanguageId" asp-route-levelId="@Model.LanguageLevelId" class="btn btn-outline-secondary">Вернуться к списку тестов</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.options-list {
    max-width: 600px;
    margin: 0 auto;
}

.form-check {
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    transition: all 0.3s ease;
}

.form-check:hover {
    background-color: rgba(255, 255, 255, 0.05);
}

.form-check-input:checked + .form-check-label {
    color: #3498db;
}
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Обработка выбора ответа
            const answerOptions = document.querySelectorAll('.answer-option');
            
            answerOptions.forEach(option => {
                option.addEventListener('click', function() {
                    const questionId = this.getAttribute('data-question-id');
                    const answer = this.getAttribute('data-answer');
                    const radioButton = document.getElementById(`answer_${questionId}_${answer}`);
                    
                    radioButton.checked = true;
                    
                    // Выделение выбранного ответа
                    document.querySelectorAll(`.answer-option[data-question-id="${questionId}"]`).forEach(op => {
                        op.classList.remove('selected');
                    });
                    this.classList.add('selected');
                });
            });
            
            // Обработка отправки теста
            document.getElementById('submitTest').addEventListener('click', function() {
                // Проверка, на все ли вопросы даны ответы
                const questionCount = @Model.Questions.Count;
                const answeredCount = document.querySelectorAll('input[type="radio"]:checked').length;
                
                if (answeredCount < questionCount) {
                    if (!confirm(`Вы ответили только на ${answeredCount} из ${questionCount} вопросов. Вы уверены, что хотите завершить тест?`)) {
                        return;
                    }
                }
                
                // Сбор данных ответов
                const answers = {};
                document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
                    const questionId = input.name.replace('question_', '');
                    answers[questionId] = input.value;
                });
                
                // Отправка результатов на сервер
                submitAnswers(answers);
            });
            
            // Функция отправки ответов
            function submitAnswers(answers) {
                const testId = document.getElementById('testId').value;
                
                // Создаем форму для отправки
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("SubmitTest", "Test")';
                
                // Добавляем testId
                const testIdInput = document.createElement('input');
                testIdInput.type = 'hidden';
                testIdInput.name = 'testId';
                testIdInput.value = testId;
                form.appendChild(testIdInput);
                
                // Добавляем ответы в формате JSON
                const answersInput = document.createElement('input');
                answersInput.type = 'hidden';
                answersInput.name = 'answers';
                answersInput.value = JSON.stringify(answers);
                form.appendChild(answersInput);
                
                // Добавляем токен для защиты от подделки запросов
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]');
                if (antiForgeryToken) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = antiForgeryToken.value;
                    form.appendChild(tokenInput);
                }
                
                // Отправляем форму
                document.body.appendChild(form);
                form.submit();
            }
        });
    </script>
} 