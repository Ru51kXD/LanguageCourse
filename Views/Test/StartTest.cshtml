@using System.Text.Json
@model WebApplication15.Controllers.TestViewModel
@{
    ViewData["Title"] = Model.TestTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var totalQuestions = Model.Questions.Count;
}

@section Styles {
    <link rel="stylesheet" href="~/css/tests.css" />
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #f5f5f5;
            color: #3c3c3c;
            font-family: 'Nunito', sans-serif;
            overflow-x: hidden;
        }
    </style>
}

<div class="duolingo-test-container">
    <div class="timer-container">
        <i class="fas fa-clock"></i>
        <span class="timer-text" id="timer">@Model.TimeLimit:00</span>
    </div>
    
    <div class="test-progress-bar">
        <div class="test-progress-fill" id="progressBar" style="width: 0%"></div>
    </div>
    
    <div class="question-card" id="questionContainer">
        <h2 class="question-text" id="questionText"></h2>
        <div class="options-container" id="optionsContainer"></div>
        <div class="navigation-buttons">
            <button type="button" class="nav-button button-prev" id="prevBtn" disabled>–ù–∞–∑–∞–¥</button>
            <button type="button" class="nav-button button-next" id="nextBtn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
        </div>
        
        <div class="duolingo-character" id="duoCharacter">
            <div class="character-bubble" id="characterBubble"></div>
            <div style="font-size: 80px; text-align: center;">üôÇ</div>
        </div>
    </div>
    
    <div id="resultContainer" class="d-none text-center">
        <div class="py-5 mt-4">
            <i class="fas fa-spinner fa-spin fa-3x mb-3"></i>
            <h2>–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...</h2>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            const testId = @Model.TestId;
            const testTitle = "@Model.TestTitle";
            const language = "@Model.Language";
            const level = "@Model.Level";
            const timeLimit = @Model.TimeLimit;
            const questions = @Html.Raw(Json.Serialize(Model.Questions));
            const totalQuestions = questions.length;
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
            let currentQuestionIndex = 0;
            let answers = {};
            let timerInterval;
            let timeLeft = timeLimit * 60; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            let checkMode = false; // —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
            let correctAnswers = 0; // —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            
            const questionContainer = document.getElementById('questionContainer');
            const questionText = document.getElementById('questionText');
            const optionsContainer = document.getElementById('optionsContainer');
            const progressBar = document.getElementById('progressBar');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const timerElement = document.getElementById('timer');
            const resultContainer = document.getElementById('resultContainer');
            const duoCharacter = document.getElementById('duoCharacter');
            const characterBubble = document.getElementById('characterBubble');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
            initTest();
            
            function initTest() {
                showQuestion(0);
                startTimer();
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                prevBtn.addEventListener('click', goToPrevQuestion);
                nextBtn.addEventListener('click', handleNextButton);
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                createConfetti();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
                setTimeout(() => {
                    duoCharacter.style.bottom = '20px';
                    showCharacterBubble('–£–¥–∞—á–∏ —Å —Ç–µ—Å—Ç–æ–º! –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è! üëç');
                }, 1000);
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
            function createConfetti() {
                const colors = ['#58cc02', '#82d900', '#ff5252', '#ffc107', '#3f51b5', '#2196f3'];
                for (let i = 0; i < 50; i++) {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti';
                    confetti.style.left = Math.random() * 100 + 'vw';
                    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.width = (Math.random() * 10 + 5) + 'px';
                    confetti.style.height = confetti.style.width;
                    confetti.style.animationDelay = Math.random() * 5 + 's';
                    confetti.style.animationDuration = (Math.random() * 5 + 5) + 's';
                    document.body.appendChild(confetti);
                }
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            function showCharacterBubble(text) {
                characterBubble.textContent = text;
                characterBubble.style.opacity = '1';
                
                setTimeout(() => {
                    characterBubble.style.opacity = '0';
                }, 4000);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–∞–ª–µ–µ/–ü—Ä–æ–≤–µ—Ä–∏—Ç—å
            function handleNextButton() {
                const currentQuestion = questions[currentQuestionIndex];
                
                // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç
                if (!answers[currentQuestion.id]) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if (!document.querySelector('.answer-required-message')) {
                        const message = document.createElement('div');
                        message.className = 'alert alert-warning mt-3 answer-required-message';
                        message.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.';
                        questionContainer.appendChild(message);
                        
                        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        setTimeout(() => {
                            if (message.parentNode) {
                                message.parentNode.removeChild(message);
                            }
                        }, 3000);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                        showCharacterBubble('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞! üëÄ');
                    }
                    return;
                }
                
                if (!checkMode) {
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏
                    checkMode = true;
                    checkAnswer();
                    return;
                }
                
                // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                checkMode = false;
                if (currentQuestionIndex < totalQuestions - 1) {
                    showQuestion(currentQuestionIndex + 1);
                } else {
                    finishTest();
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
            function checkAnswer() {
                const currentQuestion = questions[currentQuestionIndex];
                const userAnswer = answers[currentQuestion.id];
                const correctOption = currentQuestion.options.find(opt => opt.isCorrect);
                
                // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                const options = document.querySelectorAll('.option-item');
                let correct = false;
                
                options.forEach(option => {
                    const input = option.querySelector('input');
                    const label = option.querySelector('label');
                    
                    if (input.checked) {
                        if (input.value === correctOption.text) {
                            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            option.classList.add('correct-answer');
                            option.classList.add('success-animation');
                            showCorrectFeedback();
                            correct = true;
                            correctAnswers++;
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                            const messages = [
                                '–û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üëè',
                                '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üéâ',
                                '–°—É–ø–µ—Ä! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü',
                                '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É–µ—à—å! üöÄ'
                            ];
                            showCharacterBubble(messages[Math.floor(Math.random() * messages.length)]);
                        } else {
                            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            option.classList.add('wrong-answer');
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                            options.forEach(opt => {
                                const optInput = opt.querySelector('input');
                                if (optInput.value === correctOption.text) {
                                    opt.classList.add('correct-answer');
                                }
                            });
                            
                            showWrongFeedback();
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                            const messages = [
                                '–ù–µ —É–Ω—ã–≤–∞–π! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™',
                                '–û—à–∏–±–∫–∏ - —ç—Ç–æ —á–∞—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è! üìö',
                                '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω. –ó–∞–ø–æ–º–Ω–∏ –µ–≥–æ! üß†',
                                '–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è! üå±'
                            ];
                            showCharacterBubble(messages[Math.floor(Math.random() * messages.length)]);
                        }
                    }
                    
                    // –î–µ–ª–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏
                    input.disabled = true;
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                nextBtn.textContent = currentQuestionIndex === totalQuestions - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            function showCorrectFeedback() {
                const feedback = document.createElement('div');
                feedback.className = 'alert alert-success mt-4 fade-in-up';
                feedback.innerHTML = '<i class="fas fa-check-circle me-2"></i> –ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
                questionContainer.appendChild(feedback);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            function showWrongFeedback() {
                const feedback = document.createElement('div');
                feedback.className = 'alert alert-danger mt-4 fade-in-up';
                feedback.innerHTML = '<i class="fas fa-times-circle me-2"></i> –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!';
                questionContainer.appendChild(feedback);
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É
            function showQuestion(index) {
                if (index < 0 || index >= totalQuestions) return;
                
                currentQuestionIndex = index;
                const question = questions[index];
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                const feedbacks = questionContainer.querySelectorAll('.alert');
                feedbacks.forEach(feedback => feedback.remove());
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                updateProgress();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                prevBtn.disabled = index === 0;
                
                if (index === totalQuestions - 1) {
                    nextBtn.textContent = checkMode ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
                } else {
                    nextBtn.textContent = checkMode ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
                }
                
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
                questionText.innerHTML = '';
                questionText.classList.remove('slide-in-right');
                void questionText.offsetWidth; // —Ç—Ä–∏–≥–≥–µ—Ä reflow
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
                const questionNumber = document.createElement('div');
                questionNumber.className = 'text-muted mb-3';
                questionNumber.textContent = `–í–æ–ø—Ä–æ—Å ${index + 1} –∏–∑ ${totalQuestions}`;
                
                // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
                questionText.classList.add('slide-in-right');
                questionText.textContent = question.text;
                questionText.insertAdjacentElement('beforebegin', questionNumber);
                
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                optionsContainer.innerHTML = '';
                optionsContainer.classList.remove('slide-in-left');
                void optionsContainer.offsetWidth; // —Ç—Ä–∏–≥–≥–µ—Ä reflow
                optionsContainer.classList.add('slide-in-left');
                
                question.options.forEach((option, optionIndex) => {
                    const optionId = `option_${index}_${optionIndex}`;
                    const isChecked = answers[question.id] === option.text;
                    
                    const optionDiv = document.createElement('div');
                    optionDiv.className = 'option-item';
                    
                    optionDiv.innerHTML = `
                        <input type="radio" id="${optionId}" name="question_${index}" value="${option.text}" ${isChecked ? 'checked' : ''} />
                        <label for="${optionId}">${option.text}</label>
                    `;
                    
                    optionsContainer.appendChild(optionDiv);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
                    const radioInput = document.getElementById(optionId);
                    radioInput.addEventListener('change', () => {
                        answers[question.id] = option.text;
                        
                        // –≠—Ñ—Ñ–µ–∫—Ç –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        optionsContainer.querySelectorAll('.option-item').forEach(op => {
                            op.classList.remove('selected');
                        });
                        optionDiv.classList.add('selected');
                    });
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                if (index > 0 && !checkMode) {
                    const progressPercentage = (index / totalQuestions) * 100;
                    if (progressPercentage >= 50 && progressPercentage < 75) {
                        showCharacterBubble('–£–∂–µ –ø–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! üëç');
                    } else if (progressPercentage >= 75) {
                        showCharacterBubble('–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! –¢—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! üèÅ');
                    }
                }
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            function updateProgress() {
                const progressPercentage = ((currentQuestionIndex + 1) / totalQuestions) * 100;
                progressBar.style.width = `${progressPercentage}%`;
            }
            
            // –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            function goToPrevQuestion() {
                if (currentQuestionIndex > 0) {
                    checkMode = false;
                    showQuestion(currentQuestionIndex - 1);
                }
            }
            
            // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
            function startTimer() {
                updateTimerDisplay();
                
                timerInterval = setInterval(() => {
                    timeLeft--;
                    updateTimerDisplay();
                    
                    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–∏
                    if (timeLeft === 60) {
                        showCharacterBubble('–û—Å—Ç–∞–ª–∞—Å—å –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç–∞! –ü–æ—Ç–æ—Ä–æ–ø–∏—Å—å! ‚è±Ô∏è');
                    }
                    
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        finishTest();
                    }
                }, 1000);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            function updateTimerDisplay() {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç, –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
                if (timeLeft <= 60) {
                    timerElement.style.color = '#ff5353';
                }
            }
            
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            function finishTest() {
                clearInterval(timerInterval);
                
                // –°–∫—Ä—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
                questionContainer.classList.add('d-none');
                resultContainer.classList.remove('d-none');
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const percentage = Math.round((correctAnswers / totalQuestions) * 100);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                showResults({
                    score: percentage,
                    correctAnswers: correctAnswers,
                    totalQuestions: totalQuestions,
                    language: language,
                    level: level
                });
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                fetch('/Test/Submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        testId: testId,
                        answers: answers
                    })
                })
                .then(response => response.json())
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
                });
            }
            
            // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
            function showResults(data) {
                const scorePercentage = data.score;
                let resultClass = 'neutral';
                let resultEmoji = 'üéì';
                let resultMessage = '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
                
                if (scorePercentage >= 80) {
                    resultClass = 'excellent';
                    resultMessage = '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
                    resultEmoji = 'ü•á';
                } else if (scorePercentage >= 60) {
                    resultClass = 'good';
                    resultMessage = '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
                    resultEmoji = 'üèÜ';
                } else if (scorePercentage < 40) {
                    resultClass = 'poor';
                    resultMessage = '–°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª';
                    resultEmoji = 'üìö';
                }
                
                const correctAnswers = data.correctAnswers;
                const totalQuestions = data.totalQuestions;
                
                resultContainer.innerHTML = `
                    <div class="result-summary p-4 mt-4 mb-5">
                        <h1 class="score-title mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ ${resultEmoji}</h1>
                        <div class="score-circle ${resultClass}" style="--score: ${scorePercentage}">
                            <div class="score-value">${scorePercentage}%</div>
                        </div>
                        <h2 class="score-message ${resultClass} mt-4">${resultMessage}</h2>
                        <p class="score-description">–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${correctAnswers} –∏–∑ ${totalQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤.</p>
                        
                        <div class="result-details mt-5">
                            <div class="details-grid">
                                <div class="detail-item">
                                    <div class="detail-label">–Ø–∑—ã–∫</div>
                                    <div class="detail-value">${data.language}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">–£—Ä–æ–≤–µ–Ω—å</div>
                                    <div class="detail-value">${data.level}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</div>
                                    <div class="detail-value">${correctAnswers} –∏–∑ ${totalQuestions}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">–ü—Ä–æ—Ü–µ–Ω—Ç</div>
                                    <div class="detail-value">${scorePercentage}%</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="actions mt-5">
                            <a href="/Test/StartTest/${testId}" class="duolingo-button">–ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑</a>
                            <a href="/Test" class="duolingo-button">–ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤</a>
                        </div>
                    </div>
                `;
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
                document.querySelectorAll('.confetti').forEach(c => {
                    c.style.opacity = '1';
                });
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä—É–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                setTimeout(() => {
                    const scoreCircle = document.querySelector('.score-circle');
                    scoreCircle.style.transition = 'background 1.5s ease-in-out';
                    scoreCircle.style.setProperty('--score', scorePercentage);
                }, 300);
            }
        });
    </script>
} 