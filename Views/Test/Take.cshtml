@using System.Text.Json
@model WebApplication15.Controllers.TestViewModel
@{
    ViewData["Title"] = Model.TestTitle;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var totalQuestions = Model.Questions.Count;
}

<!-- Скрипт для немедленного скрытия вертикального счетчика -->
<script>
    // Функция для скрытия вертикальных элементов
    function hideVerticalCounters() {
        // Ищем все элементы с текстом содержащим "Вопрос X из Y"
        const allElements = document.querySelectorAll('div');
        for (let i = 0; i < allElements.length; i++) {
            const el = allElements[i];
            if (el.textContent && el.textContent.match(/Вопрос \d из \d/)) {
                // Скрываем элемент всеми возможными способами
                el.style.cssText = 
                    'display: none !important;' + 
                    'visibility: hidden !important;' + 
                    'opacity: 0 !important;' + 
                    'height: 0 !important;' + 
                    'width: 0 !important;' + 
                    'position: absolute !important;' + 
                    'overflow: hidden !important;' + 
                    'clip: rect(0, 0, 0, 0) !important;' + 
                    'pointer-events: none !important;';
                
                // Пытаемся удалить элемент из DOM
                if (el.parentNode) {
                    try {
                        el.parentNode.removeChild(el);
                    } catch(e) {}
                }
            }
        }
    }
    
    // Перехватываем создание новых элементов
    (function() {
        // Перехватываем createElement
        const originalCreateElement = document.createElement;
        document.createElement = function() {
            const element = originalCreateElement.apply(document, arguments);
            
            // Для div элементов добавляем наблюдатель за изменением текста
            if (arguments[0].toLowerCase() === 'div') {
                // Перехватываем установку текстового содержимого
                const originalInnerText = Object.getOwnPropertyDescriptor(Element.prototype, 'innerText');
                const originalTextContent = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');
                
                if (originalInnerText && originalInnerText.set) {
                    Object.defineProperty(element, 'innerText', {
                        set: function(value) {
                            if (value && typeof value === 'string' && value.match(/Вопрос \d из \d/)) {
                                console.log('Перехвачена попытка установить вертикальный счетчик через innerText');
                                element.style.cssText = 'display:none!important;visibility:hidden!important';
                                return '';
                            }
                            return originalInnerText.set.call(this, value);
                        },
                        get: originalInnerText.get
                    });
                }
                
                if (originalTextContent && originalTextContent.set) {
                    Object.defineProperty(element, 'textContent', {
                        set: function(value) {
                            if (value && typeof value === 'string' && value.match(/Вопрос \d из \d/)) {
                                console.log('Перехвачена попытка установить вертикальный счетчик через textContent');
                                element.style.cssText = 'display:none!important;visibility:hidden!important';
                                return '';
                            }
                            return originalTextContent.set.call(this, value);
                        },
                        get: originalTextContent.get
                    });
                }
            }
            
            return element;
        };
    })();
    
    // Выполняем во время загрузки страницы
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', hideVerticalCounters);
    } else {
        hideVerticalCounters();
    }
    
    // Выполняем периодически после загрузки страницы
    setTimeout(hideVerticalCounters, 0);
    setTimeout(hideVerticalCounters, 100);
    setTimeout(hideVerticalCounters, 300);
    setTimeout(hideVerticalCounters, 500);
    setInterval(hideVerticalCounters, 1000);
</script>

<!-- Встроенные стили с высоким приоритетом для гарантированного скрытия вертикального счетчика -->
<style>
    /* Глобальные стили с высшим приоритетом для скрытия вертикального счетчика */
    body div:has(div:contains("Вопрос 1 из 5")),
    body div:has(div:contains("Вопрос 2 из 5")),
    body div:has(div:contains("Вопрос 3 из 5")),
    body div:has(div:contains("Вопрос 4 из 5")),
    body div:has(div:contains("Вопрос 5 из 5")) {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        position: absolute !important;
        height: 0 !important;
        width: 0 !important;
        overflow: hidden !important;
        clip: rect(0, 0, 0, 0) !important;
        margin: -1px !important;
        padding: 0 !important;
        border: 0 !important;
    }
    
    /* Прямое скрытие всех элементов с текстом 'Вопрос X из 5' */
    body *:not(script):not(style):not(link):not(meta) {
        visibility: visible;
    }
    
    body *:not(script):not(style):not(link):not(meta):has-text("Вопрос 1 из 5"),
    body *:not(script):not(style):not(link):not(meta):has-text("Вопрос 2 из 5"),
    body *:not(script):not(style):not(link):not(meta):has-text("Вопрос 3 из 5"),
    body *:not(script):not(style):not(link):not(meta):has-text("Вопрос 4 из 5"),
    body *:not(script):not(style):not(link):not(meta):has-text("Вопрос 5 из 5") {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        height: 0 !important;
        position: absolute !important;
        pointer-events: none !important;
    }
</style>

<link rel="stylesheet" href="~/css/tests.css" />
<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="~/css/test.css" />
<link rel="stylesheet" href="~/css/test-animations.css" />

<style>
    body {
        font-family: 'Nunito', sans-serif;
        background-color: #f7f7f7;
    }
    
    .duolingo-test-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .test-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        background-color: white;
        padding: 15px 20px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }
    
    .progress-container {
        flex: 1;
        margin: 0 20px;
    }
    
    .progress-bar {
        height: 12px;
        background-color: #e5e5e5;
        border-radius: 6px;
        overflow: hidden;
    }
    
    .progress-fill {
        height: 100%;
        background-color: #58cc02;
        width: 0%;
        border-radius: 6px;
        transition: width 0.3s ease;
    }
    
    .question-number {
        font-weight: 700;
        color: #4b4b4b;
    }
    
    .timer {
        font-weight: 800;
        color: #4b4b4b;
        display: flex;
        align-items: center;
    }
    
    .timer-icon {
        margin-right: 8px;
        color: #ff5353;
    }
    
    .question-container {
        background-color: white;
        border-radius: 16px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }
    
    .question-text {
        font-size: 24px;
        font-weight: 700;
        color: #3c3c3c;
        margin-bottom: 30px;
    }
    
    .options-container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .option {
        padding: 15px 20px;
        border: 2px solid #e5e5e5;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
    }
    
    .option:hover {
        border-color: #a5a5a5;
        background-color: #f9f9f9;
    }
    
    .option.selected {
        border-color: #1cb0f6;
        background-color: rgba(28, 176, 246, 0.1);
    }
    
    .option-letter {
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background-color: #f0f0f0;
        margin-right: 15px;
        font-weight: 700;
        color: #4b4b4b;
    }
    
    .option.selected .option-letter {
        background-color: #1cb0f6;
        color: white;
    }
    
    .option-text {
        font-size: 18px;
        font-weight: 600;
        color: #3c3c3c;
    }
    
    .action-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .button {
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 700;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
    }
    
    .primary-button {
        background-color: #58cc02;
        color: white;
        box-shadow: 0 4px 0 #58a700;
    }
    
    .primary-button:hover {
        background-color: #62de03;
        transform: translateY(-2px);
    }
    
    .primary-button:active {
        background-color: #58cc02;
        transform: translateY(0);
        box-shadow: 0 2px 0 #58a700;
    }
    
    .secondary-button {
        background-color: #f7f7f7;
        color: #3c3c3c;
        box-shadow: 0 4px 0 #e5e5e5;
    }
    
    .secondary-button:hover {
        background-color: #f0f0f0;
        transform: translateY(-2px);
    }
    
    .secondary-button:active {
        background-color: #f7f7f7;
        transform: translateY(0);
        box-shadow: 0 2px 0 #e5e5e5;
    }
    
    .button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
    }
    
    .fade-in-up {
        animation: fadeInUp 0.5s ease forwards;
    }
    
    .success-animation {
        animation: pulse 0.5s ease;
    }
    
    .slide-in-right {
        animation: slideInRight 0.5s ease forwards;
    }
    
    .slide-in-left {
        animation: slideInLeft 0.5s ease forwards;
    }
    
    .correct-answer {
        background-color: rgba(88, 204, 2, 0.2) !important;
        border-color: #58cc02 !important;
    }
    
    .wrong-answer {
        background-color: rgba(255, 83, 83, 0.2) !important;
        border-color: #ff5353 !important;
    }
    
    .score-title {
        font-size: 2.5rem;
        font-weight: 800;
        margin-bottom: 20px;
        color: #3c3c3c;
    }
    
    .confetti {
        position: fixed;
        width: 10px;
        height: 10px;
        background-color: #58cc02;
        opacity: 0;
        border-radius: 50%;
        animation: confetti 5s ease-in-out infinite;
    }
    
    .result-summary {
        background-color: white;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.07);
        text-align: center;
    }
    
    .score-circle {
        width: 180px;
        height: 180px;
        border-radius: 50%;
        margin: 0 auto;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        background: conic-gradient(
            #58cc02 0% calc(var(--score, 0) * 1%),
            #e5e5e5 calc(var(--score, 0) * 1%) 100%
        );
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    
    .score-circle::before {
        content: "";
        position: absolute;
        inset: 20px;
        border-radius: 50%;
        background-color: white;
    }
    
    .score-value {
        position: relative;
        z-index: 1;
        font-size: 36px;
        font-weight: 800;
        color: #3c3c3c;
    }
    
    .score-message {
        font-size: 24px;
        font-weight: 700;
    }
    
    .score-message.excellent {
        color: #58cc02;
    }
    
    .score-message.good {
        color: #fecb2e;
    }
    
    .score-message.poor {
        color: #ff5353;
    }
    
    .score-circle.excellent {
        --score: 0;
        border-color: #58cc02;
    }
    
    .score-circle.good {
        --score: 0;
        border-color: #fecb2e;
    }
    
    .score-circle.poor {
        --score: 0;
        border-color: #ff5353;
    }
    
    .details-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-top: 30px;
    }
    
    .detail-item {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 10px;
    }
    
    .detail-label {
        font-size: 14px;
        color: #777;
        margin-bottom: 5px;
    }
    
    .detail-value {
        font-size: 18px;
        font-weight: 700;
        color: #3c3c3c;
    }
    
    .duolingo-character {
        position: fixed;
        bottom: 20px;
        right: 80px;
        transition: bottom 0.5s ease;
        z-index: 1000;
    }
    
    .duolingo-character img {
        width: 120px;
        height: auto;
    }
    
    .character-bubble {
        position: absolute;
        top: -80px;
        right: 0;
        background-color: white;
        border-radius: 20px;
        padding: 10px 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        font-weight: 600;
        min-width: 200px;
        text-align: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .character-bubble::after {
        content: "";
        position: absolute;
        bottom: -10px;
        right: 30px;
        left: auto;
        transform: none;
        border-width: 10px 10px 0;
        border-style: solid;
        border-color: white transparent transparent;
    }
    
    /* Новые стили для интерактивного счетчика вопросов */
    .question-indicators {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
        gap: 10px;
    }
    
    .question-indicator {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 16px;
        background-color: #e5e5e5;
        color: #555;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
    }
    
    .question-indicator.active {
        background-color: #58cc02;
        color: white;
        transform: scale(1.1);
        box-shadow: 0 4px 10px rgba(88, 204, 2, 0.3);
    }
    
    .question-indicator.completed {
        background-color: #b8e986;
        color: #3c6300;
    }
    
    .question-indicator.correct {
        background-color: #58cc02;
        color: white;
    }
    
    .question-indicator.incorrect {
        background-color: #ff7676;
        color: white;
    }
    
    .question-indicator::after {
        content: '';
        position: absolute;
        width: 20px;
        height: 3px;
        background-color: #e5e5e5;
        right: -15px;
        top: 50%;
        transform: translateY(-50%);
    }
    
    .question-indicator:last-child::after {
        display: none;
    }
    
    .question-indicator.completed::after, 
    .question-indicator.correct::after,
    .question-indicator.incorrect::after {
        background-color: #b8e986;
    }
    
    .question-status-text {
        text-align: center;
        margin-bottom: 15px;
        font-size: 16px;
        color: #666;
        font-weight: 600;
    }
    
    /* Стили для горизонтального счетчика вопросов */
    .questions-progress-bar {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-bottom: 30px;
        padding: 10px;
        background-color: #f5f5f5;
        border-radius: 10px;
        max-width: 350px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .question-step {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #e0e0e0;
        color: #555;
        font-weight: bold;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        position: relative;
    }
    
    .question-step.active {
        background-color: #58cc02;
        color: white;
        transform: scale(1.1);
        box-shadow: 0 4px 10px rgba(88, 204, 2, 0.2);
    }
    
    .question-step.completed {
        background-color: #b8e986;
        color: #3c6300;
    }
    
    .question-step::after {
        content: "";
        position: absolute;
        width: 15px;
        height: 2px;
        background-color: #ccc;
        right: -15px;
    }
    
    .question-step:last-child::after {
        display: none;
    }
    
    /* Скрываем вертикальный список, если он существует */
    .vertical-questions-list {
        display: none;
    }
    
    /* Принудительное скрытие вертикального списка вопросов */
    .question-card > div:nth-child(2),
    .question-card > div:nth-child(3),
    .question-card > div:nth-child(4),
    .question-card > div:nth-child(5),
    .question-card > div:nth-child(6) {
        display: none !important;
    }
    
    /* Прямое скрытие по тексту (используем атрибут data-hide для маркировки) */
    [data-hide-vertical="true"] {
        display: none !important;
    }
    
    /* Дополнительные селекторы для повышения специфичности */
    .question-card div[class=""],
    .question-card div:not([class]) {
        display: none !important;
    }
</style>

<div class="duolingo-test-container">
    <div class="timer-container">
        <i class="fas fa-clock"></i>
        <span class="timer-text" id="timer">@Model.TimeLimit:00</span>
    </div>
    
    <div class="test-progress-bar">
        <div class="test-progress-fill" id="progressBar" style="width: 0%"></div>
    </div>
    
    <div class="question-card d-none" id="questionContainer">
        <!-- Изначально скрываем все элементы, которые могут содержать вертикальный счетчик -->
        <div hidden aria-hidden="true" style="display:none!important;visibility:hidden!important;opacity:0!important;height:0!important;width:0!important;">Вопрос 1 из 5</div>
        <div hidden aria-hidden="true" style="display:none!important;visibility:hidden!important;opacity:0!important;height:0!important;width:0!important;">Вопрос 2 из 5</div>
        <div hidden aria-hidden="true" style="display:none!important;visibility:hidden!important;opacity:0!important;height:0!important;width:0!important;">Вопрос 3 из 5</div>
        <div hidden aria-hidden="true" style="display:none!important;visibility:hidden!important;opacity:0!important;height:0!important;width:0!important;">Вопрос 4 из 5</div>
        <div hidden aria-hidden="true" style="display:none!important;visibility:hidden!important;opacity:0!important;height:0!important;width:0!important;">Вопрос 5 из 5</div>
        
        <!-- Здесь будет горизонтальная навигация по вопросам -->
        <div class="questions-navigation" id="questionsNavigation"></div>
        
        <h2 class="question-text" id="questionText"></h2>
        <div class="options-container" id="optionsContainer"></div>
        <div class="navigation-buttons">
            <button type="button" class="nav-button button-prev" id="prevBtn" disabled>Назад</button>
            <button type="button" class="nav-button button-next" id="nextBtn">Проверить</button>
        </div>
        
        <div class="duolingo-character" id="duoCharacter">
            <div class="character-bubble" id="characterBubble"></div>
            <div style="font-size: 80px; text-align: center;">🙂</div>
        </div>
    </div>
    
    <div id="resultContainer" class="d-none text-center">
        <div class="py-5 mt-4">
            <i class="fas fa-spinner fa-spin fa-3x mb-3"></i>
            <h2>Проверяем ваши ответы...</h2>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Данные теста
            const testId = @Model.TestId;
            const testTitle = "@Model.TestTitle";
            const language = "@Model.Language";
            const level = "@Model.Level";
            const timeLimit = @Model.TimeLimit;
            const questions = @Html.Raw(Json.Serialize(Model.Questions));
            const totalQuestions = questions.length;
            
            // Состояние теста
            let currentQuestionIndex = 0;
            let answers = {};
            let timerInterval;
            let timeLeft = timeLimit * 60; // в секундах
            let checkMode = false; // режим проверки ответа
            let correctAnswers = 0; // счетчик правильных ответов
            
            const questionContainer = document.getElementById('questionContainer');
            const questionText = document.getElementById('questionText');
            const optionsContainer = document.getElementById('optionsContainer');
            const progressBar = document.getElementById('progressBar');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const timerElement = document.getElementById('timer');
            const resultContainer = document.getElementById('resultContainer');
            const duoCharacter = document.getElementById('duoCharacter');
            const characterBubble = document.getElementById('characterBubble');
            
            // Инициализация теста
            initTest();
            
            function initTest() {
                questionContainer.classList.remove('d-none');
                
                // Создаем горизонтальную навигацию
                createHorizontalQuestionsNavigation();
                
                // Создаем индикаторы вопросов
                createQuestionIndicators();
                
                showQuestion(0);
                startTimer();
                
                // Обработчики кнопок
                prevBtn.addEventListener('click', goToPrevQuestion);
                nextBtn.addEventListener('click', handleNextButton);
                
                // Создаем конфетти для результатов
                createConfetti();
                
                // Показываем персонажа с приветствием
                setTimeout(() => {
                    showCharacterBubble('Удачи с тестом! Я верю в тебя! 👍');
                }, 1000);
            }
            
            // Создание конфетти
            function createConfetti() {
                const colors = ['#58cc02', '#82d900', '#ff5252', '#ffc107', '#3f51b5', '#2196f3'];
                for (let i = 0; i < 50; i++) {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti';
                    confetti.style.left = Math.random() * 100 + 'vw';
                    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.width = (Math.random() * 10 + 5) + 'px';
                    confetti.style.height = confetti.style.width;
                    confetti.style.animationDelay = Math.random() * 5 + 's';
                    confetti.style.animationDuration = (Math.random() * 5 + 5) + 's';
                    document.body.appendChild(confetti);
                }
            }
            
            // Показать сообщение от персонажа
            function showCharacterBubble(text) {
                characterBubble.textContent = text;
                characterBubble.style.opacity = '1';
                
                setTimeout(() => {
                    characterBubble.style.opacity = '0';
                }, 4000);
            }
            
            // Обработка кнопки Далее/Проверить
            function handleNextButton() {
                const currentQuestion = questions[currentQuestionIndex];
                
                // Если не выбран ответ
                if (!answers[currentQuestion.id]) {
                    // Показываем уведомление
                    if (!document.querySelector('.answer-required-message')) {
                        const message = document.createElement('div');
                        message.className = 'alert alert-warning mt-3 answer-required-message';
                        message.textContent = 'Пожалуйста, выберите один из вариантов ответа.';
                        questionContainer.appendChild(message);
                        
                        // Удаляем сообщение через 3 секунды
                        setTimeout(() => {
                            if (message.parentNode) {
                                message.parentNode.removeChild(message);
                            }
                        }, 3000);
                        
                        // Показываем сообщение от персонажа
                        showCharacterBubble('Нужно выбрать один из вариантов ответа! 👀');
                    }
                    return;
                }
                
                if (!checkMode) {
                    // Переходим в режим проверки
                    checkMode = true;
                    checkAnswer();
                    return;
                }
                
                // Если в режиме проверки, переходим к следующему вопросу
                checkMode = false;
                if (currentQuestionIndex < totalQuestions - 1) {
                    showQuestion(currentQuestionIndex + 1);
                } else {
                    finishTest();
                }
            }
            
            // Проверка ответа
            function checkAnswer() {
                const currentQuestion = questions[currentQuestionIndex];
                const userAnswer = answers[currentQuestion.id];
                const correctOption = currentQuestion.options.find(opt => opt.isCorrect);
                
                // Находим выбранный вариант
                const options = document.querySelectorAll('.option-item');
                let correct = false;
                
                options.forEach(option => {
                    const input = option.querySelector('input');
                    const label = option.querySelector('label');
                    
                    if (input.checked) {
                        if (input.value === correctOption.text) {
                            // Правильный ответ
                            option.classList.add('correct-answer');
                            option.classList.add('success-animation');
                            showCorrectFeedback();
                            correct = true;
                            correctAnswers++;
                            
                            // Показываем сообщение от персонажа
                            const messages = [
                                'Отлично! Так держать! 👏',
                                'Правильно! Ты молодец! 🎉',
                                'Супер! Продолжай в том же духе! 🌟',
                                'Великолепно! Ты прогрессируешь! 🚀'
                            ];
                            showCharacterBubble(messages[Math.floor(Math.random() * messages.length)]);
                        } else {
                            // Неправильный ответ
                            option.classList.add('wrong-answer');
                            
                            // Показываем правильный ответ
                            options.forEach(opt => {
                                const optInput = opt.querySelector('input');
                                if (optInput.value === correctOption.text) {
                                    opt.classList.add('correct-answer');
                                }
                            });
                            
                            showWrongFeedback();
                            
                            // Показываем сообщение от персонажа
                            const messages = [
                                'Не унывай! В следующий раз получится! 💪',
                                'Ошибки - это часть обучения! 📚',
                                'Правильный ответ выделен. Запомни его! 🧠',
                                'Продолжай стараться! 🌱'
                            ];
                            showCharacterBubble(messages[Math.floor(Math.random() * messages.length)]);
                        }
                    }
                    
                    // Делаем варианты неактивными
                    input.disabled = true;
                });
                
                // Обновляем индикаторы вопросов
                updateQuestionIndicators();
                
                // Обновляем текст кнопки
                nextBtn.textContent = currentQuestionIndex === totalQuestions - 1 ? 'Завершить' : 'Продолжить';
                
                // Обновляем горизонтальную навигацию
                updateQuestionsNavigation();
            }
            
            // Показываем обратную связь для правильного ответа
            function showCorrectFeedback() {
                const feedback = document.createElement('div');
                feedback.className = 'alert alert-success mt-4 fade-in-up';
                feedback.innerHTML = '<i class="fas fa-check-circle me-2"></i> Правильно!';
                questionContainer.appendChild(feedback);
                
                // Звуковой эффект
                const audio = new Audio('/sounds/correct.mp3');
                audio.play().catch(e => console.log('Аудио не может быть воспроизведено:', e));
            }
            
            // Показываем обратную связь для неправильного ответа
            function showWrongFeedback() {
                const feedback = document.createElement('div');
                feedback.className = 'alert alert-danger mt-4 fade-in-up';
                feedback.innerHTML = '<i class="fas fa-times-circle me-2"></i> Неправильно!';
                questionContainer.appendChild(feedback);
                
                // Звуковой эффект
                const audio = new Audio('/sounds/wrong.mp3');
                audio.play().catch(e => console.log('Аудио не может быть воспроизведено:', e));
            }
            
            // Показать вопрос по индексу
            function showQuestion(index) {
                if (index < 0 || index >= totalQuestions) return;
                
                currentQuestionIndex = index;
                const question = questions[index];
                
                // Очищаем предыдущие сообщения обратной связи
                const feedbacks = questionContainer.querySelectorAll('.alert');
                feedbacks.forEach(feedback => feedback.remove());
                
                // Обновляем прогресс
                updateProgress();
                
                // Обновляем горизонтальную навигацию
                updateQuestionsNavigation();
                
                // Обновляем состояние кнопок
                prevBtn.disabled = index === 0;
                
                if (index === totalQuestions - 1) {
                    nextBtn.textContent = checkMode ? 'Завершить' : 'Проверить';
                } else {
                    nextBtn.textContent = checkMode ? 'Продолжить' : 'Проверить';
                }
                
                // Обновляем индикаторы вопросов
                updateQuestionIndicators();
                
                // Очищаем и заполняем вопрос
                questionText.innerHTML = '';
                questionText.classList.remove('slide-in-right');
                void questionText.offsetWidth; // триггер reflow
                
                // Анимируем вопрос
                questionText.classList.add('slide-in-right');
                questionText.textContent = question.text;
                
                // Очищаем и заполняем варианты ответов
                optionsContainer.innerHTML = '';
                optionsContainer.classList.remove('slide-in-left');
                void optionsContainer.offsetWidth; // триггер reflow
                optionsContainer.classList.add('slide-in-left');
                
                question.options.forEach((option, optionIndex) => {
                    const optionId = `option_${index}_${optionIndex}`;
                    const isChecked = answers[question.id] === option.text;
                    
                    const optionDiv = document.createElement('div');
                    optionDiv.className = 'option-item';
                    
                    optionDiv.innerHTML = `
                        <input type="radio" id="${optionId}" name="question_${index}" value="${option.text}" ${isChecked ? 'checked' : ''} />
                        <label for="${optionId}">${option.text}</label>
                    `;
                    
                    optionsContainer.appendChild(optionDiv);
                    
                    // Добавляем обработчик события
                    const radioInput = document.getElementById(optionId);
                    radioInput.addEventListener('change', () => {
                        answers[question.id] = option.text;
                        
                        // Эффект выбора варианта
                        optionsContainer.querySelectorAll('.option-item').forEach(op => {
                            op.classList.remove('selected');
                        });
                        optionDiv.classList.add('selected');
                    });
                });
                
                // Показываем персонажа с подбадривающим сообщением при переходе к новому вопросу
                if (index > 0 && !checkMode) {
                    const progressPercentage = (index / totalQuestions) * 100;
                    if (progressPercentage >= 50 && progressPercentage < 75) {
                        showCharacterBubble('Уже половина пройдена! Ты справляешься! 👍');
                    } else if (progressPercentage >= 75) {
                        showCharacterBubble('Осталось совсем немного! Ты почти у цели! 🏁');
                    }
                }
            }
            
            // Создание индикаторов вопросов
            function createQuestionIndicators() {
                // Проверяем, нет ли уже контейнера
                let indicatorsContainer = document.querySelector('.question-indicators');
                if (!indicatorsContainer) {
                    // Создаем статус текст
                    const statusText = document.createElement('div');
                    statusText.className = 'question-status-text';
                    statusText.textContent = `Вопрос ${currentQuestionIndex + 1} из ${totalQuestions}`;
                    questionContainer.insertBefore(statusText, questionText);
                    
                    // Создаем контейнер для индикаторов
                    indicatorsContainer = document.createElement('div');
                    indicatorsContainer.className = 'question-indicators';
                    questionContainer.insertBefore(indicatorsContainer, statusText);
                    
                    // Создаем индикаторы для каждого вопроса
                    for (let i = 0; i < totalQuestions; i++) {
                        const indicator = document.createElement('div');
                        indicator.className = 'question-indicator';
                        indicator.textContent = i + 1;
                        indicator.dataset.index = i;
                        
                        // Добавляем обработчик клика, если вопрос уже был пройден
                        indicator.addEventListener('click', function() {
                            const index = parseInt(this.dataset.index);
                            // Разрешаем навигацию только по пройденным вопросам или текущему
                            if (index <= currentQuestionIndex) {
                                showQuestion(index);
                            }
                        });
                        
                        indicatorsContainer.appendChild(indicator);
                    }
                }
                
                updateQuestionIndicators();
            }
            
            // Обновление индикаторов вопросов
            function updateQuestionIndicators() {
                const indicators = document.querySelectorAll('.question-indicator');
                const statusText = document.querySelector('.question-status-text');
                
                if (statusText) {
                    statusText.textContent = `Вопрос ${currentQuestionIndex + 1} из ${totalQuestions}`;
                }
                
                if (indicators.length) {
                    indicators.forEach((indicator, i) => {
                        // Удаляем все классы состояния
                        indicator.classList.remove('active', 'completed', 'correct', 'incorrect');
                        
                        if (i === currentQuestionIndex) {
                            // Текущий вопрос
                            indicator.classList.add('active');
                        } else if (i < currentQuestionIndex) {
                            // Пройденный вопрос
                            indicator.classList.add('completed');
                            
                            // Если в режиме проверки, добавляем класс правильности/неправильности
                            if (checkMode) {
                                const questionId = questions[i].id;
                                const userAnswer = answers[questionId];
                                const correctOption = questions[i].options.find(opt => opt.isCorrect);
                                
                                if (userAnswer === correctOption.text) {
                                    indicator.classList.add('correct');
                                } else {
                                    indicator.classList.add('incorrect');
                                }
                            }
                        }
                    });
                }
            }
            
            // Обновление прогресс-бара
            function updateProgress() {
                const progressPercentage = ((currentQuestionIndex + 1) / totalQuestions) * 100;
                progressBar.style.width = `${progressPercentage}%`;
            }
            
            // Перейти к предыдущему вопросу
            function goToPrevQuestion() {
                if (currentQuestionIndex > 0) {
                    checkMode = false;
                    showQuestion(currentQuestionIndex - 1);
                }
            }
            
            // Запуск таймера
            function startTimer() {
                updateTimerDisplay();
                
                timerInterval = setInterval(() => {
                    timeLeft--;
                    updateTimerDisplay();
                    
                    // Предупреждение о малом количестве времени
                    if (timeLeft === 60) {
                        showCharacterBubble('Осталась всего минута! Поторопись! ⏱️');
                    }
                    
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        finishTest();
                    }
                }, 1000);
            }
            
            // Обновление отображения таймера
            function updateTimerDisplay() {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                // Добавляем красный цвет, когда остается мало времени
                if (timeLeft <= 60) {
                    timerElement.style.color = '#ff5353';
                }
            }
            
            // Завершение теста
            function finishTest() {
                // Останавливаем таймер
                clearInterval(timerInterval);
                
                // Финальное обновление индикаторов
                updateQuestionIndicators();
                
                // Скрываем вопросы и показываем результаты
                questionContainer.classList.add('d-none');
                resultContainer.classList.remove('d-none');
                
                // Вычисляем результат
                const score = Math.round((correctAnswers / totalQuestions) * 100);
                
                // Обновляем элементы результата
                document.getElementById('finalScore').textContent = score;
                document.getElementById('correctAnswers').textContent = correctAnswers;
                document.getElementById('totalQuestionsResult').textContent = totalQuestions;
                
                // Показываем соответствующее сообщение
                let resultMessage = '';
                let characterMessage = '';
                
                if (score >= 90) {
                    resultMessage = 'Отлично! Вы превосходно справились с тестом!';
                    characterMessage = 'Вау! Я впечатлен! Ты настоящий полиглот! 🏆';
                } else if (score >= 70) {
                    resultMessage = 'Хорошо! Вы успешно прошли тест!';
                    characterMessage = 'Отличная работа! Ты молодец! 🎉';
                } else if (score >= 50) {
                    resultMessage = 'Неплохо! Но есть к чему стремиться.';
                    characterMessage = 'Хороший результат! Продолжай практиковаться! 🌱';
                } else {
                    resultMessage = 'Стоит повторить материал и попробовать снова.';
                    characterMessage = 'Не расстраивайся! Каждая ошибка - это шаг к совершенству! 💪';
                }
                
                document.getElementById('resultMessage').textContent = resultMessage;
                
                // Запускаем анимацию заполнения круга
                const circle = document.querySelector('.score-circle-fill');
                setTimeout(() => {
                    circle.style.strokeDashoffset = 440 - (440 * score / 100);
                    document.querySelector('.confetti-container').classList.add('active');
                }, 500);
                
                // Показываем персонажа с поздравлением
                setTimeout(() => {
                    showCharacterBubble(characterMessage);
                }, 1000);
                
                // Отправляем результат на сервер
                saveTestResult(score);
                
                // Снимаем обработчики с индикаторов вопросов
                document.querySelectorAll('.question-indicator').forEach(indicator => {
                    indicator.removeEventListener('click', function() {});
                    indicator.style.cursor = 'default'; // Убираем курсор-указатель
                });
            }
            
            // Отправка результатов на сервер
            function submitTest() {
                // Преобразуем объект ответов в нужный формат
                const submissionData = {
                    testId: testId,
                    answers: answers
                };
                
                // Отправляем на сервер
                fetch('/Test/Submit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(submissionData)
                })
                .then(response => response.json())
                .then(data => {
                    // Показываем результаты
                    showResults(data);
                    
                    // Перенаправляем на страницу профиля после задержки
                    setTimeout(() => {
                        window.location.href = data.profileUrl || '/Account/Profile';
                    }, 8000);
                })
                .catch(error => {
                    console.error('Ошибка при отправке результатов:', error);
                    resultContainer.innerHTML = `
                        <div class="py-5 mt-4">
                            <i class="fas fa-exclamation-circle fa-3x mb-3 text-danger"></i>
                            <h2>Произошла ошибка при отправке результатов</h2>
                            <p class="text-muted">Пожалуйста, попробуйте еще раз</p>
                            <a href="/Test" class="btn btn-primary mt-3">Вернуться к тестам</a>
                        </div>
                    `;
                });
            }
            
            // Показ результатов теста
            function showResults(data) {
                // Проверка на валидность scorePercentage
                let scorePercentage = 0;
                if (data.score !== undefined && !isNaN(data.score)) {
                    scorePercentage = Math.round(data.score);
                } else if (data.correctAnswers !== undefined && data.totalQuestions !== undefined) {
                    // Рассчитываем процент на основе кол-ва правильных ответов
                    scorePercentage = Math.round((data.correctAnswers / data.totalQuestions) * 100);
                }
                
                let resultClass = 'neutral';
                let resultEmoji = '🎓';
                let resultMessage = 'Хороший результат!';
                
                if (scorePercentage >= 80) {
                    resultClass = 'excellent';
                    resultMessage = 'Отличный результат!';
                    resultEmoji = '🥇';
                } else if (scorePercentage >= 60) {
                    resultClass = 'good';
                    resultMessage = 'Хороший результат!';
                    resultEmoji = '🏆';
                } else if (scorePercentage < 40) {
                    resultClass = 'poor';
                    resultMessage = 'Стоит повторить материал';
                    resultEmoji = '📚';
                }
                
                const correctAnswers = data.correctAnswers || 0;
                const totalQuestions = data.totalQuestions || 0;
                
                resultContainer.innerHTML = `
                    <div class="result-summary p-4 mt-4 mb-5">
                        <h1 class="score-title mb-4">Результаты теста ${resultEmoji}</h1>
                        <div class="score-circle ${resultClass}" style="--score: ${scorePercentage}">
                            <div class="score-value">${scorePercentage}%</div>
                        </div>
                        <h2 class="score-message ${resultClass} mt-4">${resultMessage}</h2>
                        <p class="score-description">Вы ответили правильно на ${correctAnswers} из ${totalQuestions} вопросов.</p>
                        
                        <div class="result-details mt-5">
                            <div class="details-grid">
                                <div class="detail-item">
                                    <div class="detail-label">Язык</div>
                                    <div class="detail-value">${data.language || 'Неизвестно'}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Уровень</div>
                                    <div class="detail-value">${data.level || 'Неизвестно'}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Правильных ответов</div>
                                    <div class="detail-value">${correctAnswers} из ${totalQuestions}</div>
                                </div>
                                <div class="detail-item">
                                    <div class="detail-label">Процент</div>
                                    <div class="detail-value">${scorePercentage}%</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="actions mt-5">
                            <a href="/Test/Take/${testId}" class="btn btn-primary me-3">Пройти еще раз</a>
                            <a href="/Test/Index" class="btn btn-secondary">К списку тестов</a>
                        </div>
                    </div>
                `;
                
                // Запускаем конфетти
                document.querySelectorAll('.confetti').forEach(c => {
                    c.style.opacity = '1';
                });
                
                // Добавляем персонажа на страницу результатов, если его нет
                if (document.querySelector('.duolingo-character')) {
                    document.querySelector('.duolingo-character').style.zIndex = '1500';
                } else {
                    const duoElement = document.createElement('div');
                    duoElement.className = 'duolingo-character';
                    duoElement.id = 'resultDuoCharacter';
                    duoElement.innerHTML = `
                        <div class="character-bubble" id="resultCharacterBubble"></div>
                        <div style="font-size: 80px; text-align: center;">🙂</div>
                    `;
                    document.body.appendChild(duoElement);
                    
                    const resultCharacterBubble = document.getElementById('resultCharacterBubble');
                    resultCharacterBubble.textContent = 'Отличная работа! Ты молодец! 👏';
                    resultCharacterBubble.style.opacity = '1';
                    
                    setTimeout(() => {
                        resultCharacterBubble.style.opacity = '0';
                    }, 4000);
                }
            }
            
            // Добавляем новую функцию для создания горизонтальной навигации
            function createHorizontalQuestionsNavigation() {
                const questionsNavigation = document.getElementById('questionsNavigation');
                if (!questionsNavigation) return;
                
                // Очищаем контейнер
                questionsNavigation.innerHTML = '';
                
                // Создаем горизонтальную панель навигации
                const navigationBar = document.createElement('div');
                navigationBar.className = 'questions-progress-bar';
                
                // Создаем элементы для каждого вопроса
                for (let i = 0; i < totalQuestions; i++) {
                    const questionStep = document.createElement('a');
                    questionStep.className = 'question-step';
                    questionStep.textContent = i + 1;
                    questionStep.href = '#';
                    questionStep.addEventListener('click', function(e) {
                        e.preventDefault();
                        // Переходим к вопросу только если он доступен
                        if (i <= currentQuestionIndex) {
                            showQuestion(i);
                        }
                    });
                    
                    navigationBar.appendChild(questionStep);
                }
                
                questionsNavigation.appendChild(navigationBar);
                updateQuestionsNavigation();
            }
            
            // Функция для обновления горизонтальной навигации
            function updateQuestionsNavigation() {
                const questionSteps = document.querySelectorAll('.question-step');
                
                questionSteps.forEach((step, index) => {
                    // Сбрасываем классы
                    step.classList.remove('active', 'completed');
                    
                    if (index === currentQuestionIndex) {
                        step.classList.add('active');
                    } else if (index < currentQuestionIndex) {
                        step.classList.add('completed');
                    }
                });
            }
            
            // Добавляем мощный MutationObserver для отслеживания изменений DOM и немедленного удаления вертикального счетчика
            function setupMutationObserver() {
                // Находим корневой элемент, в котором появляются вертикальные счетчики
                const targetNode = document.querySelector('.question-card');
                if (!targetNode) {
                    console.log('Целевой элемент для наблюдения не найден');
                    return;
                }
                
                // Создаем конфигурацию для наблюдателя
                const config = { 
                    childList: true,  // наблюдаем за добавлением/удалением дочерних узлов
                    subtree: true,    // наблюдаем за всем деревом элементов
                    attributes: true  // наблюдаем за изменением атрибутов
                };
                
                // Функция обратного вызова, которая будет выполняться при изменениях
                const callback = function(mutationsList, observer) {
                    for (const mutation of mutationsList) {
                        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                            // Проверяем все добавленные узлы
                            mutation.addedNodes.forEach(node => {
                                // Проверяем, является ли узел элементом
                                if (node.nodeType === Node.ELEMENT_NODE) {
                                    // Проверяем сам элемент на наличие текста "Вопрос X из 5"
                                    if (node.textContent && node.textContent.match(/Вопрос \d из \d/)) {
                                        console.log('Найден вертикальный счетчик, удаляем:', node.textContent);
                                        node.remove();
                                    }
                                    
                                    // Проверяем все дочерние элементы
                                    const verticalElements = node.querySelectorAll('div');
                                    verticalElements.forEach(el => {
                                        if (el.textContent && el.textContent.match(/Вопрос \d из \d/)) {
                                            console.log('Найден дочерний вертикальный счетчик, удаляем:', el.textContent);
                                            el.remove();
                                        }
                                    });
                                }
                            });
                            
                            // Принудительно проверяем все существующие элементы
                            removeAllVerticalCounters();
                        }
                    }
                };
                
                // Создаем наблюдателя с нашей функцией обратного вызова
                const observer = new MutationObserver(callback);
                
                // Начинаем наблюдение за целевым узлом с указанной конфигурацией
                observer.observe(targetNode, config);
                console.log('MutationObserver настроен и запущен');
                
                // Удаляем все существующие счетчики при инициализации
                removeAllVerticalCounters();
            }
            
            // Функция для поиска и удаления всех вертикальных счетчиков
            function removeAllVerticalCounters() {
                // Ищем все элементы с текстом "Вопрос X из Y"
                document.querySelectorAll('div').forEach(div => {
                    if (div.textContent && div.textContent.match(/Вопрос \d из \d/)) {
                        // Сначала скрываем стилями
                        div.style.cssText = 'display: none !important; visibility: hidden !important; opacity: 0 !important; height: 0 !important; position: absolute !important; overflow: hidden !important; pointer-events: none !important;';
                        
                        // Затем полностью удаляем из DOM (если у элемента есть родитель)
                        if (div.parentNode) {
                            try {
                                div.parentNode.removeChild(div);
                                console.log('Успешно удален вертикальный счетчик');
                            } catch(e) {
                                console.error('Ошибка при удалении вертикального счетчика:', e);
                            }
                        }
                    }
                });
            }
            
            // Запускаем MutationObserver после небольшой задержки
            setTimeout(setupMutationObserver, 100);
            
            // Запускаем повторное удаление счетчиков с интервалом
            const removalInterval = setInterval(removeAllVerticalCounters, 200);
            
            // Остановим интервал после 30 секунд (150 попыток)
            setTimeout(() => {
                clearInterval(removalInterval);
                console.log('Интервал удаления счетчиков остановлен');
            }, 30000);
        });
    </script>
} 